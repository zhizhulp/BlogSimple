{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":0},{"_id":"source/images/五级三晋制69800工资表.jpg","path":"images/五级三晋制69800工资表.jpg","modified":1,"renderable":0},{"_id":"source/images/wechat-qcode.jpg","path":"images/wechat-qcode.jpg","modified":1,"renderable":0},{"_id":"source/images/lifecycle-states.png","path":"images/lifecycle-states.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/exturl.js","path":"js/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/js.cookie.js","path":"js/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/affix.js","path":"js/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/post-details.js","path":"js/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/scroll-cookie.js","path":"js/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/scrollspy.js","path":"js/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"source/images/五级三晋制晋升及工资图.jpg","path":"images/五级三晋制晋升及工资图.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"source/images/wuhan/20190503_170337.jpg","path":"images/wuhan/20190503_170337.jpg","modified":1,"renderable":0},{"_id":"source/images/wuhan/20190503_173152.jpg","path":"images/wuhan/20190503_173152.jpg","modified":1,"renderable":0},{"_id":"source/images/wuhan/20190503_170529.jpg","path":"images/wuhan/20190503_170529.jpg","modified":1,"renderable":0},{"_id":"source/images/wuhan/20190503_170120.jpg","path":"images/wuhan/20190503_170120.jpg","modified":1,"renderable":0},{"_id":"source/images/wuhan/20190503_165947.jpg","path":"images/wuhan/20190503_165947.jpg","modified":1,"renderable":0},{"_id":"source/images/wuhan/20190503_173412.jpg","path":"images/wuhan/20190503_173412.jpg","modified":1,"renderable":0},{"_id":"source/images/wuhan/20190503_170611.jpg","path":"images/wuhan/20190503_170611.jpg","modified":1,"renderable":0},{"_id":"source/images/wuhan/20190503_173538.jpg","path":"images/wuhan/20190503_173538.jpg","modified":1,"renderable":0},{"_id":"source/images/wuhan/20190503_165748.jpg","path":"images/wuhan/20190503_165748.jpg","modified":1,"renderable":0},{"_id":"source/images/wuhan/20190503_173219.jpg","path":"images/wuhan/20190503_173219.jpg","modified":1,"renderable":0},{"_id":"source/videos/20190504_132327.mp4","path":"videos/20190504_132327.mp4","modified":1,"renderable":0},{"_id":"source/videos/20190504_132411.mp4","path":"videos/20190504_132411.mp4","modified":1,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"f32cb46228cffcc5defdc9fcc92d4fb6ab6cb978","modified":1559120919226},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1559264769183},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1559264769182},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1559264769184},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1559264769185},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1559264769195},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1559264769194},{"_id":"themes/next/.travis.yml","hash":"fb9ac54e875f6ea16d5c83db497f6bd70ae83198","modified":1559264769194},{"_id":"themes/next/bower.json","hash":"070292487d141982c9bef64bd32e1cb39d03d395","modified":1559264769196},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1559264769197},{"_id":"themes/next/.all-contributorsrc","hash":"43eb0149c78e464c695f0dd758bb8c59353182b3","modified":1559264769182},{"_id":"themes/next/package.json","hash":"d3ea523f723aafd6bebcd8a47a0d976c69dfeaf5","modified":1559264769248},{"_id":"source/404.html","hash":"8e383c281de5b6ee7859d8d41a4d50eebb953ed7","modified":1559183763860},{"_id":"themes/next/README.md","hash":"3f72e5a5051ca2bdaccdda684c46dc4fdb4413a6","modified":1559264769195},{"_id":"themes/next/gulpfile.coffee","hash":"6407d9063bd88ede299ff7c2a59cf2c82e079476","modified":1559264769207},{"_id":"themes/next/_config.yml","hash":"209d7bd2ab50caa17c4305fb17ab9ca2c2e34b7f","modified":1559295712166},{"_id":"source/about/index.md","hash":"cde6a7346f19d642bfe059e22e6f4501affdef69","modified":1559115066561},{"_id":"source/_posts/51武汉游.md","hash":"d97b61ee2d8f9d4851a94b3564407e72371b4c29","modified":1559788716740},{"_id":"source/_posts/Hexo、Hugo、 Jekyll、 Ghost对比.md","hash":"55a3c52cc0d3ec089a8fbad0ba89f08e8fd9364c","modified":1559188232517},{"_id":"source/_posts/Hexo欢迎页面.md","hash":"cbf54dc1095be72a717b3efcdb3c49816b05db62","modified":1559285909483},{"_id":"source/_posts/万恶的1040.md","hash":"961c572be1d128ea7f34f4308884ad0b88c37e24","modified":1560324252107},{"_id":"source/_posts/Hexo的安装及配置.md","hash":"bff0d30cadb4b7cf486dc980b24598275698a2a2","modified":1559529145898},{"_id":"source/categories/index.md","hash":"a634c7d6bcc2bb4bc94e0bdca590d171c7228081","modified":1559119567270},{"_id":"source/_posts/一个高大上的名字-POJO.md","hash":"f322ffea1e9ec7862046ee5c7be38c6d6903b778","modified":1559715375858},{"_id":"source/_posts/Jetpack学习-LiveData.md","hash":"17b400ab4fbf3fb982d750f99ae2e25c8f322f58","modified":1561080182893},{"_id":"source/images/avatar.jpg","hash":"de2960a846290e1a1a6561c0a16412c3a9f53744","modified":1559122319905},{"_id":"source/tags/index.md","hash":"5f88c5a37553d63e846a5d2652467c3c508210de","modified":1559184884877},{"_id":"source/images/五级三晋制69800工资表.jpg","hash":"f20bc6a94b2aa3bfea0a1725ff73c7db9564ce87","modified":1560324153060},{"_id":"source/images/wechat-qcode.jpg","hash":"8d1b2103572d71aaf80317a8e00489451a50840c","modified":1559271197923},{"_id":"source/_posts/Jetpack学习-Lifecycles.md","hash":"5c2fe11859b51c1323e0c8c7b5e1b1fb8b4fe15e","modified":1559800292529},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"f7ddb7faed8031a9f40eae4ee7bb48c1bc50fd14","modified":1559264769185},{"_id":"source/_posts/Jetpack学习-DataBinding.md","hash":"e2c0b3bd966982af0bfe877d7eff0b3fb4de7a3d","modified":1560932040439},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"1e212fe229bd659726b4a3bcf4b5b14e0310ba3a","modified":1559264769187},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"046262c4b2f54b5ed8ac19b0c99aad04968e01e5","modified":1559264769186},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"f1631b9bef922e7bc2db1e33badfad70fd88d459","modified":1559264769190},{"_id":"themes/next/.github/auto_assign.yml","hash":"9fe0dbe3f6edc59bf10ea25b14eba0e92e2c8f42","modified":1559264769190},{"_id":"themes/next/.github/config.yml","hash":"cbd06d0c40afa9fdf056765120e9085826b00d20","modified":1559264769191},{"_id":"themes/next/.github/eslint-disable-bot.yml","hash":"e06053d417579ed967a94166deb6bda5ce41d805","modified":1559264769191},{"_id":"themes/next/.github/lock.yml","hash":"4f1070097b614b24050f238694127e3573ce8472","modified":1559264769191},{"_id":"themes/next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1559264769192},{"_id":"themes/next/.github/release-drafter.yml","hash":"d01b1e8f462af114e3934fef2ee654634d86b406","modified":1559264769192},{"_id":"themes/next/.github/stale.yml","hash":"85975c43d606c39b91c0ad32197154be9d482a09","modified":1559264769193},{"_id":"themes/next/.github/topissuebot.yml","hash":"5091c3bc6f3df303d16d853ce65a302601c1e875","modified":1559264769193},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1559264769208},{"_id":"themes/next/.github/weekly-digest.yml","hash":"6db3bcad65c3156de298f6a3ffd3ba887af4aa4f","modified":1559264769193},{"_id":"themes/next/languages/es.yml","hash":"db1a9f2af477212544c830c2dd986400e26ddd6a","modified":1559264769209},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1559264769193},{"_id":"themes/next/languages/de.yml","hash":"79b3221344da335743b5ef5a82efa9338d64feb0","modified":1559264769208},{"_id":"themes/next/languages/en.yml","hash":"d66b8b48840443a4f9c72c7696a21e292f685a47","modified":1559264769208},{"_id":"themes/next/languages/fa.yml","hash":"3227072c7e1bfb16ec0517394b60632f4be921dd","modified":1559264769209},{"_id":"themes/next/languages/fr.yml","hash":"2429c90dad5bb865e3a969be2b373f19b3a77b3b","modified":1559264769210},{"_id":"themes/next/languages/it.yml","hash":"31eb878b53d60ff47e3e534cdd7a839c8801ac6e","modified":1559264769210},{"_id":"themes/next/languages/id.yml","hash":"f3302a4dfdc9be38a52d6e081411574b1ea01671","modified":1559264769210},{"_id":"themes/next/languages/nl.yml","hash":"08f16ce395dacc88847fc30dc6b985ce22fb8948","modified":1559264769211},{"_id":"themes/next/languages/pt.yml","hash":"ca5072c967e5eb1178ffed91827459eda6e4e6e2","modified":1559264769212},{"_id":"themes/next/languages/ko.yml","hash":"75f2fe142f76bf623e34ed3570598226f55f2b8b","modified":1559264769211},{"_id":"themes/next/languages/ru.yml","hash":"720b92a9ec075b68737d296b1f29ad8e01151c85","modified":1559264769212},{"_id":"themes/next/languages/pt-BR.yml","hash":"c7de8b77f44e75be4f04423088a1c891537aa601","modified":1559264769212},{"_id":"themes/next/languages/ja.yml","hash":"3f25eca504ee5a519987b4402731f1bb7f5191c9","modified":1559264769211},{"_id":"themes/next/languages/zh-CN.yml","hash":"069f15da910d6f9756be448167c07ea5aa5dc346","modified":1559264769214},{"_id":"themes/next/languages/vi.yml","hash":"e2f0dd7f020a36aa6b73ed4d00dcc4259a7e5e9d","modified":1559264769213},{"_id":"themes/next/languages/tr.yml","hash":"6d2f53d3687a7a46c67c78ab47908accd8812add","modified":1559264769212},{"_id":"themes/next/languages/uk.yml","hash":"6320439c6e9ff81e5b8f8129ca16e9a744b37032","modified":1559264769213},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1559264769250},{"_id":"themes/next/scripts/merge-configs.js","hash":"5f96f63e86825fd7028c2522e4111103e261a758","modified":1559264769250},{"_id":"themes/next/languages/zh-TW.yml","hash":"dbf4dd87716babb2db4f5332fae9ec190a6f636a","modified":1559264769214},{"_id":"themes/next/layout/_layout.swig","hash":"ba786b1baba49021928e2e508da53f2fd1369b3f","modified":1559264769215},{"_id":"themes/next/languages/zh-HK.yml","hash":"c22113c4a6c748c18093dae56da5a9e8c5b963cd","modified":1559264769214},{"_id":"themes/next/layout/archive.swig","hash":"61bc56e77e653684fc834f63dcbdadf18687c748","modified":1559264769247},{"_id":"themes/next/layout/category.swig","hash":"ad0ac6a1ff341f8eab9570e7fb443962948c5f9d","modified":1559264769247},{"_id":"themes/next/layout/post.swig","hash":"af74e97d57cf00cde6f8dbd4364f27910915454e","modified":1559264769248},{"_id":"themes/next/layout/page.swig","hash":"5d06ee8f477ffc39932d0251aa792ffcaf8faf14","modified":1559264769248},{"_id":"themes/next/layout/schedule.swig","hash":"e79f43df0e9a6cf48bbf00882de48c5a58080247","modified":1559264769248},{"_id":"themes/next/layout/index.swig","hash":"bdcc9f57adef49706b16b107791cacecbc23c1dc","modified":1559264769247},{"_id":"source/images/lifecycle-states.png","hash":"2beb80664b11bcab458f037cc5a3fe6efb7472af","modified":1559546736024},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1559264769323},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1559264769323},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1559264769324},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"1e49c08b446678336b2eacc8bf581faca969f34b","modified":1559264769198},{"_id":"themes/next/docs/AUTHORS.md","hash":"51a0a13da55ff3d596970b2f9ab4531c6b2211f2","modified":1559264769198},{"_id":"themes/next/docs/DATA-FILES.md","hash":"9a1895c0a0db705c4c48f512e86917f9af1ec3fb","modified":1559264769198},{"_id":"themes/next/docs/INSTALLATION.md","hash":"b74ef6fedf76cdb156e2265759ee0a789ddd49cc","modified":1559264769200},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"721a1aa9feed1b580ab99af8e69ed22699121e88","modified":1559264769200},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1559264769200},{"_id":"themes/next/docs/MATH.md","hash":"7d0330c250082a86897d1c96fbb4ef5df59538af","modified":1559264769201},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"c9f2ed8e15c137b1885d9ca8b7197d9f457971e9","modified":1559264769201},{"_id":"themes/next/layout/tag.swig","hash":"283519d4d5b67814412863a3e0212bac18bcc5a0","modified":1559264769248},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1559264769197},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559264769297},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"795b8ddb251da8e2327299d5f7dbf446fb9867c6","modified":1559264769188},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"59b2b45e151972bbe08582cde22f398e58832765","modified":1559264769189},{"_id":"themes/next/.github/ISSUE_TEMPLATE/non-english.md","hash":"ae22e700b7c63c60746321719a20d34022ad78d9","modified":1559264769189},{"_id":"themes/next/scripts/filters/exturl.js","hash":"b19c7c1021e57367b3b3bbf5678381017ed5667d","modified":1559264769249},{"_id":"themes/next/scripts/helpers/engine.js","hash":"cdb6152582313268d970ffeef99b4a8a7850f034","modified":1559264769249},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"a40ce6bc852bb4bff8b9f984fa064741dd151e96","modified":1559264769250},{"_id":"themes/next/scripts/tags/exturl.js","hash":"f9f25905adecfb8be49def4ff3b0b8bbc6955d84","modified":1559264769252},{"_id":"themes/next/scripts/tags/button.js","hash":"95a520f6529424a03c7ead6dbfd5e626d672febb","modified":1559264769251},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"23d839333422375e85d44e476f554faf49973a3c","modified":1559264769253},{"_id":"themes/next/scripts/tags/full-image.js","hash":"a6b2264215c555c553b2c5db85fa90678798d0d5","modified":1559264769252},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1559264769253},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1559264769254},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"4519ab8e6898f2ee90d05cde060375462b937a7d","modified":1559264769251},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1559264769254},{"_id":"themes/next/scripts/tags/pdf.js","hash":"ab995f0fc60d60f637220e2651111b775b8a06de","modified":1559264769254},{"_id":"themes/next/scripts/tags/tabs.js","hash":"72a5adbd8f300bee1d0c289367598ca06b2bed17","modified":1559264769254},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1559264769255},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1559264769215},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1559264769215},{"_id":"themes/next/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"245917ffaa296bc2d9a85444acf639077ca25944","modified":1559264769188},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"891ab67815969dd8736cb22fbbb3f791b8fff4e4","modified":1559264769216},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"ab4a82a7246265717556c7a42f897430340b88cf","modified":1559264769253},{"_id":"themes/next/layout/_custom/head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1559264769215},{"_id":"themes/next/layout/_partials/comments.swig","hash":"d0b9e841d55c974d02f43823a06a2627f8e46431","modified":1559264769218},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"91017f58f83d9505ce99109fffdc51c032bf017e","modified":1559264769218},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"1ad13269b43b900356f3bdab7947d6a86f035a2c","modified":1559264769220},{"_id":"themes/next/layout/_partials/footer.swig","hash":"9a79dde1412b1b1473380e8b6cacfe1930ed321b","modified":1559264769219},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"914155d5d758306cff405beefd4a07973fd8fc77","modified":1559264769224},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"dee345054d564dd56f74bb143942d3edd1cb8150","modified":1559264769224},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"cccd93d30787675010b1a74ef02eb5b813ec1d96","modified":1559264769229},{"_id":"themes/next/layout/_scripts/exturl.swig","hash":"c2e8f4b3a2bf991320ecc827dcdc227399ad5b51","modified":1559264769229},{"_id":"themes/next/layout/_scripts/next-boot.swig","hash":"50c3ae6b50f173ae70f8c3312f7c6da1097eb9b6","modified":1559264769229},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"efb3404a3303622f3be60944d9d1926972c5c248","modified":1559264769231},{"_id":"themes/next/layout/_scripts/scroll-cookie.swig","hash":"8a992b7fe42b9c1a5eb9d937b0827aed91586d94","modified":1559264769233},{"_id":"themes/next/layout/_macro/post.swig","hash":"7dfaaddca93e52eb4ad03cd70daa2615b1c17fd8","modified":1559533691383},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4130f995f0c4f81a44266194ecae9df96fad174c","modified":1559264769233},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"4b93dc7ac0573c402aabcb5c933bbcb893b07c51","modified":1559264769239},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"87bcb495f7ddd81cc3fe2c2a886e51c08053019b","modified":1559264769238},{"_id":"themes/next/layout/_third-party/chatra.swig","hash":"87182367d7954457cb2498bbfa9445c03c2d619e","modified":1559264769239},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"76f5933925670044ec65b454295ba7e0a8439986","modified":1559264769244},{"_id":"themes/next/layout/_third-party/mermaid.swig","hash":"80dfc0879866e6512cb67590a3b2d8741a66f980","modified":1559264769243},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"7db4ad4a8dd5420dad2f6890f5299945df0af970","modified":1559264769244},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"8b1322a091355853db62a5aafb8886fdbd8ab56a","modified":1559264769245},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"e0d65688661875200cb4dd401fc5ac833c697f91","modified":1559264769242},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"4ae61c7efb16e962385bfe522a38c4d29cdcccbe","modified":1559264769244},{"_id":"themes/next/layout/_third-party/tidio.swig","hash":"b44010cd577e4d063c3406772938c4b117ec7b7b","modified":1559264769246},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"c476dc3693a9dd0be2d136a45b0d7fdef55d4d92","modified":1559264769245},{"_id":"themes/next/source/css/main.styl","hash":"5e7d28bc539e84f8b03e68df82292f7fc0f2d023","modified":1559264769297},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"882cd0b68c493af1b6d945660f9c21085e006ffc","modified":1559264769245},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1559264769299},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1559264769298},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1559264769300},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1559264769300},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1559264769300},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1559264769301},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1559264769301},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1559264769303},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1559264769298},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1559264769303},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1559264769302},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1559264769302},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1559264769303},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1559264769304},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1559264769303},{"_id":"themes/next/source/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1559264769304},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"7b2963daac19b0c14f98ebef375d5fbce8fc3f44","modified":1559264769202},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"a51de08657f5946f4028b11373280ddc04639525","modified":1559264769202},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"1a4e41adcf5831057f3f7b3025ed4a5ef7c442b4","modified":1559264769203},{"_id":"themes/next/docs/ru/README.md","hash":"aeb95129ab1da9ec41786bfa86dc32c739ee6358","modified":1559264769202},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"aaf25d304793344e2d026062768c93005723f5c6","modified":1559264769203},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"018a259694f4a8c7c384e1f323531442cba5fbf3","modified":1559264769204},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"67f4a987e7db0ab1ce1ea4c311f2961df07b6681","modified":1559264769205},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"baca12cc24be082f1db28c7f283493569666321c","modified":1559264769205},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"b17fc344ff61603f83387c0f9b2b2189aae81d50","modified":1559264769206},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"db2797f161e1e7a4987cbfa3d1be682266dfbba6","modified":1559264769206},{"_id":"themes/next/docs/zh-CN/README.md","hash":"4016948fdb971e4f905efb7a5bb3add3dd58e7a8","modified":1559264769206},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"2095d1214a4e519a1d31b67b41c89080fa3285d3","modified":1559264769207},{"_id":"themes/next/source/js/algolia-search.js","hash":"84906eeae57bd06744dd20160b93eacf658f97e2","modified":1559264769305},{"_id":"themes/next/source/js/exturl.js","hash":"c48aa4b3c0e578a807fd3661e6cd4f3890777437","modified":1559264769306},{"_id":"themes/next/source/js/js.cookie.js","hash":"f11e84def0352b7dd6393f1b83e55a40ab468686","modified":1559264769306},{"_id":"themes/next/source/js/affix.js","hash":"ad343aa406fd8181b5f310434817ce98fc2219e3","modified":1559264769305},{"_id":"themes/next/source/js/next-boot.js","hash":"696a0c2cf158001576d56b48195ec8e39e835b47","modified":1559264769307},{"_id":"themes/next/source/js/post-details.js","hash":"7d309b771e86c7e22ce11cc25625481ef7d5985c","modified":1559264769308},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"16d98708de86efe40ebcb02c02a01af0f160b80a","modified":1559264769204},{"_id":"themes/next/source/js/scroll-cookie.js","hash":"c4867626afab749404daf321367f9b6b8e223f69","modified":1559264769309},{"_id":"themes/next/source/js/motion.js","hash":"d0a6d9dbcc57159e54bbb1f683b86632ae0b78f0","modified":1559264769307},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1559264769304},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1559264769302},{"_id":"themes/next/source/js/scrollspy.js","hash":"68d3690152c89e7adb08bb35ec28dbda2bd93686","modified":1559264769309},{"_id":"themes/next/source/js/utils.js","hash":"fed16cd4fa5fac8cb4a63633d1840792a056f2be","modified":1559264769310},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559264769282},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559264769282},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559526847458},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559264769294},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559290342462},{"_id":"source/images/五级三晋制晋升及工资图.jpg","hash":"3f0dfc4bd978dfd50a491774f7b237142d6225c3","modified":1560334219123},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"4eb8e222dc337211efb0d3bbdb5e29af3e6ecdb8","modified":1559264769216},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"25aea3d764b952f3f6d28ab86d7212d138e892df","modified":1559264769216},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"b57bf9c865bed0f22157176a8085de168a1aef77","modified":1559264769220},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"f46699a9daa5fef599733cbab35cb75cf7a05444","modified":1559264769224},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"fd079a414ca0f42f4cddd00247a9d5a5f58c4d8e","modified":1559264769220},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"466e69a4b4fbdc57f33e60a16b0d87e494385e21","modified":1559264769221},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"2b905ddd5dea8558c3fd95aacad241da6b6800f4","modified":1559264769223},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"c909f6e96373c151dea325bcddfdd8c9522421b6","modified":1559264769221},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"03f669356bbaa70144b743f3312178e1981ac3a8","modified":1559264769221},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"e015c7d9b84062b60b15b36be3ef11929dd10943","modified":1559264769223},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"39c4ad0e36b7c1260da98ba345f7bd72a2ac0f2e","modified":1559264769222},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1559264769226},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"f14e9e8c27af82f1bfe794e252dec0d7e521f503","modified":1559264769226},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1559264769227},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c609097b95eb6127c2784f47f2230e6e6efc0be2","modified":1559264769228},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"31245e09ce0465b994cebd94223a531585c4eab4","modified":1559264769228},{"_id":"themes/next/layout/_partials/share/likely.swig","hash":"647e8677d1ccfb3f7918dd3ea2ff7078504a845d","modified":1559264769229},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a62c93f19429f159bcf0c2e533ffc619aa399755","modified":1559264769231},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"cf87ab778618a32119ec1c4ac2079a51385b1913","modified":1559264769231},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7ef07edd2a97a3774229990d2f0a6eefa31bd015","modified":1559264769232},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"828eb9c47f34090c841a2e9a0b3f31b0e4ccf40a","modified":1559264769232},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"66d562b3778dbc839f7c00103bd0099c5d61602a","modified":1559264769233},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"3c548934b97cc426544947f7a2ae35c270b5e33f","modified":1559264769232},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"2e1de38f44af00209129d4051b7ae307cb11ad68","modified":1559264769235},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"83dd7df11b100bae38c9faab9a478f92149a0315","modified":1559264769234},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"54b43d406cf37932e7b60f46814e864d31b1842c","modified":1559264769228},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"335005a9f8b36349f0ad0a7beeba6969c55fc7f7","modified":1559264769235},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"f648e5bf8c5dfc74143233976ed4ff5978deda43","modified":1559264769235},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"73576c9683d9ad9b124916dc6c660607fe7cc1fa","modified":1559264769235},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"39928f358dd13d9fc1a4641800e57be157ecd815","modified":1559264769237},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"623e73bedef067ac24a398ef27c8197295da872d","modified":1559264769236},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"d68da660cd1cc8fb3ff0a81178decadb620afc11","modified":1559264769236},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"8ab040fccba41675bc835973515530af8a51f8bd","modified":1559264769236},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"4cff8bf5c42c62f7f0ac1f0d70f839dae39ba77a","modified":1559264769238},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"71fb01bcad43bc9410ab19190373b9f7e59215b5","modified":1559264769237},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"a22d1ea29a5ffe46199ab7d108a291a05af8d5b6","modified":1559264769237},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f331ad02beea8990066d32ad6ec9f859672c3615","modified":1559264769225},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"be6683db6a269d83bb0441d7cf74db63a240fa8a","modified":1559264769225},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"f62b801c7999da67b4bdca9c5e373b9b5ed039dc","modified":1559264769225},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"fb7727e8ec63a58238a7206bf70eb273c8879993","modified":1559264769226},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"d18c87d7839e7407e39acd2998bcc9e0b34611b0","modified":1559264769237},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"43a20fa0e9ae2f4254f04813f9c619dd36b49ae5","modified":1559264769243},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"ea1c136f960667a0a13b334db497b9b19c41f629","modified":1559264769243},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"8b4a94dd80b3bac7c5390c8a7fd377b88c2cb78e","modified":1559264769240},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"d685df1516cb138d7a83bac5d7878a1e0fa8bc04","modified":1559264769240},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"767ba29f258db5d2e5baf875a6f36ac1d44df6a3","modified":1559264769243},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"bc3fc9d053b3d1fc0cd3918bf9a629a6f38f6414","modified":1559264769239},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"b3818fd0b3028dadf341b6d0b180e1243683de6a","modified":1559264769241},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"1a5d94f5779a2ce13abc886dd78e0617f89c34b9","modified":1559264769241},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"4e86e1ace90a70bb8862f5e6de9dbe7bfc046bee","modified":1559264769240},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"9a4923d2aa5182531ea7a7fb9abe824450026208","modified":1559264769241},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"143ef265c96a8ea2fb93c36c5ffb9c5e940f7693","modified":1559264769246},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"078bd2d5815eb23e8c5f74467dc0042babea00ae","modified":1559264769246},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"1b72c755101c9dfb85da13df9a0abccf37cd1dd2","modified":1559264769242},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1559264769282},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"49dd9901167d12009d7fbd39fb255a47662e4a2a","modified":1559527053826},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"1aabac9e37a8f4451c86d09037b3a1f8b30eaf5e","modified":1559264769283},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"21a14a19149f1cb8e011c477f29dd1352675605b","modified":1559264769283},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1559264769294},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"e9b0752f08398709e787546a246baca12b4c557f","modified":1559264769294},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"d45ca53af17d1d83fd27f8ed0917a72f0060e1a9","modified":1559264769246},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1559264769311},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1559264769312},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1559264769312},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1559264769312},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1559264769310},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1559264769322},{"_id":"themes/next/source/js/schemes/muse.js","hash":"ccc0c5cd4ec6f8159c98990ad83f11a5c0b0234c","modified":1559264769308},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"3eea56cc9ce47bb4760930c4c69cebf847a7fbb2","modified":1559264769308},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1559264769321},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1559264769322},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"da7049f3d9a157abe0ecc62611edcf43605ba84d","modified":1559264769296},{"_id":"themes/next/source/css/_variables/base.styl","hash":"f0177a4f5d2b0282c78b763e61aa06c8ebfa0e5d","modified":1559283045498},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"1a4ac0d119f2126ef8951897338706edce112235","modified":1559264769279},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"5c0ca7f801859cff254d2f5b7d1a70d66ff61a8d","modified":1559264769255},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1559264769319},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"463817cbbd804ce134cb3e7e721431cb0e1616f2","modified":1559264769256},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"9fd526db0527c71243f05e18086f937dc67b1c3e","modified":1559264769256},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"997058180065d986e05df72992cc2cbfd7febd7e","modified":1559264769257},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1559264769256},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"cfa64bd8ee2ff9f943673e339d69341e76fbf031","modified":1559264769268},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"40144394fdfe05d400f39f6763f66f75479a2e34","modified":1559264769279},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"35c6fd7eab3779bd9e38b7ba8825ab0c67a1be7a","modified":1559264769280},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"afdd21533db18d846e1a2663b1199761b1bd2c1e","modified":1559264769269},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"a4c6ee546a94fd69e5b7a1e4c054ab8cacb73d2a","modified":1559264769263},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"9c6194177533619a6f6685dc7e890dcbec456241","modified":1559264769280},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"107f42aa590ec4ba0765a0bc5d735f0f09edc0ff","modified":1559264769281},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1559264769281},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"8da8416213127595dfc4d2b358639194647e7bd3","modified":1559264769285},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"d0e9065b0dbbc01811259f0597d1790268b4881b","modified":1559264769284},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1559264769285},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"40f266e24af4dedc9497056ab18ebcfda38dd47d","modified":1559264769286},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"6aee54cd5a20181e18596565356bd54c66e33823","modified":1559264769286},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"25f05ed8da68d034dce7f06e0f20f6cd55841070","modified":1559264769287},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"a609ff811f2b2764f5470236fe2fb1f3aa6ccba5","modified":1559528924108},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"04706657af638f2746ae59520e6fc78577c7682c","modified":1559264769288},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"6aee54cd5a20181e18596565356bd54c66e33823","modified":1559264769290},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"157e6915dcf5990566e463acffa71043b2651c07","modified":1559264769289},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"e73d6da74c5755442e831d8fd7d922c5b32bd892","modified":1559264769292},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0b3001909f3446843b226030524ea8498d4d8997","modified":1559264769292},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"234b44cfd03f9c9e3e179ff5fd698ac876341913","modified":1559264769289},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"b9619c9827f969ca2e2f5878552362a7b858918f","modified":1559264769291},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1559264769290},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0d6f0df798449b710e1e5dbd43d470089b2a3c95","modified":1559264769293},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"fec36a14080104b5862e9f021eab117d87c5f7c5","modified":1559264769281},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"adb7379f3b9001840eb38b260434e89365771a81","modified":1559264769293},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"5b5e0a02a7bf63de9efcd33a4e482939cce5822d","modified":1559264769293},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1559264769313},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1559264769313},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1559264769314},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"06d9d00257abd28414ec0b746f866bf9911cf5ec","modified":1559264769286},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1559264769317},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1559264769320},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"c9cfb4b99e1ec8ec9cf075cb761b8f7fa5fe63fd","modified":1559264769258},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"2df409df04fdb52d7234876a9f6e502edd4e3929","modified":1559264769257},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1559264769258},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"b8647d6140141b0a160607f6353e4d4594cca92e","modified":1559264769259},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"33200f60bd6a8bbfc66dd49a239bcc75c2f564c1","modified":1559264769259},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"024e8ff40ca881c6fbf45712897e22f58a3811ab","modified":1559264769260},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"a8f4d4b86acaa34c99111b2dde5d0779cc7e0de6","modified":1559264769257},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"9c1a082e6c1f96187a099c3f4cb5424c0c9fd06e","modified":1559264769260},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"e5a5f8747fdf2ca960e4e73c081b8952afd62224","modified":1559264769261},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fa1cea6fcc3f552d57cc7d28380a304859139bf6","modified":1559264769261},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"3a0efe849587b34f20d4e260028dc799215b0bb3","modified":1559264769259},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1559264769262},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"9a8fb61bd2d184de9d206e62ba8961d1845c5669","modified":1559264769262},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"c27527cdeb9e3a9f447f7238f442a5dc33fde4e6","modified":1559264769263},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1559264769262},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"c97c819a65f6967485184399397601e5133deda6","modified":1559264769263},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"f3b0d259e991ac86454ae5eac6bc94dc8691d8c9","modified":1559264769264},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1559264769263},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"fc94dd09b4245143b452d6cf2fc4c12134d99d6d","modified":1559264769265},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a73346f999b31355075cd58637946a8950cf6f7e","modified":1559264769265},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"f14cefc99309934d4103a3aa785e1258d858813f","modified":1559264769265},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"b6a241626783d2ac115d683fd59ec283af68e5bb","modified":1559264769265},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1559264769261},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"4aad8e36178faaa71a767af0084d578df4c09f73","modified":1559264769266},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"13d365ee626c01f17ec664b3f54f51d8b9ee7cf4","modified":1559264769266},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1559264769267},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"86e65497bbd4d7715bf6cfb01942b21ccebd0eba","modified":1559273925499},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1559264769267},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"539fc0880b2e035e8316d5d4b423703195c1b7ba","modified":1559264769267},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"c8009fd9598a661b7d23158b5121b6ac266939e9","modified":1559264769268},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ccd0b1309acff0c676fdcc848a8ae2d05f0369ab","modified":1559264769267},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"981795aad232c8bd3f52a0ed8720db696d18a234","modified":1559264769268},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"ab1776c5dc537beabb0ab81a0f04e08bebad070b","modified":1559264769269},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"615fca7dff197a2ca3df674cf963ce70b8525985","modified":1559264769268},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"03a4e75e963e3e7cc393d588b1495a88d52e0e40","modified":1559264769270},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"e58bb8b7127aa21e8260493a425ec00fcb25d338","modified":1559264769270},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"7e2ba73073daaea0a18c3d67ff137dd683af7011","modified":1559264769270},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"b36eea093bd4b32056b5de6f370ff57e50b25a49","modified":1559264769270},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"a5484d8436b2b7862faf6e7309a9e7b88cdd0027","modified":1559264769269},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"3cb387fa70017f3c24a1a1884461d29deda54585","modified":1559264769271},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"0eadef0381f696de7f88d7dc5f0ddc3cd5d309b3","modified":1559264769271},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"ed3a2960ebce7396d1893bb8e08c99c7d9259140","modified":1559264769272},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"9204c79c05d620ecd5d411cdf11e27441b6281dc","modified":1559264769271},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"2d58ad90f148e845bc7023751a7a13260600f8d6","modified":1559264769273},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1559264769273},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"b43421291bf85b589e8d0ec853e238d36ab80631","modified":1559264769273},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"fde59300ec38868676ff5ed495b9dc9b02d07ffc","modified":1559264769272},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"da7a21f5a2f7dcf4c5a4788d7670159ca4132b65","modified":1559264769275},{"_id":"themes/next/source/css/_common/components/tags/pdf.styl","hash":"3baeeb51cfe123e99235ee1816d0e1f6a97c7852","modified":1559264769274},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"020fac447d7a17c03e2802f0f724ae0738088354","modified":1559264769274},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"54c5398c7bf5b8bd9f38a9ece1dd82a9255f9a30","modified":1559264769275},{"_id":"themes/next/source/css/_common/components/third-party/copy-code.styl","hash":"d9c244b1c3a09a7fccd3c3f732e6fb112a8cd565","modified":1559264769276},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"a01484e350ad5fc9b1fdfbfafb2ddd9687ad4d20","modified":1559264769276},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"4305813408a1cd6aba764a7769b94b081d383d4f","modified":1559264769275},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"2fbe52f955da41c7a14eb09918bf86a252e4504f","modified":1559264769277},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"2a1008f1044b450b806adc166754ba9513e68375","modified":1559264769277},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"6880467b4f6d7b057fb8291aa10966429a0a3bff","modified":1559264769278},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"ed8a12982c0497eeb9d7642781abeb801428f83d","modified":1559264769277},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1559264769318},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"9801977a23268e36c5deefd270423f6f1a0c3bb2","modified":1559264769278},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7cf42f96ba6b249c75e00dad251ebacf7de61e6c","modified":1559264769278},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1559264769287},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1559264769288},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"35dc9f3990fadff3ea038d4e8ac75923219886ed","modified":1559264769278},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1559264769291},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1559264769316},{"_id":"source/images/wuhan/20190503_170337.jpg","hash":"f32dbe5677afb14b5d75532ae0b52188cecbd190","modified":1559786693642},{"_id":"source/images/wuhan/20190503_173152.jpg","hash":"13cc32c6fdb480f0d1d28d3cfde4a75747d76461","modified":1559786697976},{"_id":"source/images/wuhan/20190503_170529.jpg","hash":"6ed953333b210affa188ae9d45e428b300be2bb4","modified":1559786693953},{"_id":"source/images/wuhan/20190503_170120.jpg","hash":"c329d0c1dfad74926834b10ce7a65106eef42f4f","modified":1559786692803},{"_id":"source/images/wuhan/20190503_165947.jpg","hash":"d41abb59d7f8360a74d15dc525ea1ac46b6ee3d3","modified":1559786693280},{"_id":"source/images/wuhan/20190503_173412.jpg","hash":"aed368d8805bbe025094e417223342ae114d3e18","modified":1559786698491},{"_id":"source/images/wuhan/20190503_170611.jpg","hash":"f67a76989891a64a1abc4b0cf869bba2333f347d","modified":1559786696995},{"_id":"source/images/wuhan/20190503_173538.jpg","hash":"748ed6a567652d479ceccbb4e7ac973963b56e6a","modified":1559786701004},{"_id":"source/images/wuhan/20190503_165748.jpg","hash":"e01a39a8755b1a4cb7bdeae9133051bd738c0c60","modified":1559786696689},{"_id":"source/images/wuhan/20190503_173219.jpg","hash":"5d54c0be7fb262ae799ff358db52ef143d37b91f","modified":1559786698896},{"_id":"source/videos/20190504_132327.mp4","hash":"1fd26a0b32cbdfabb79185f3fe2c6c9e5f2df134","modified":1559786790958},{"_id":"source/videos/20190504_132411.mp4","hash":"885e7876e403d623feb36ea1529d82dce537cd79","modified":1559786831909},{"_id":"public/search.xml","hash":"77b9acb96148be59e26ebef09fe6b948c9fbc901","modified":1561109850885},{"_id":"public/404.html","hash":"7fa47ab21c8c8dd163eefcd7d2ae1f804e765894","modified":1561109850942},{"_id":"public/about/index.html","hash":"2832333bf76c25838be70044033109e02d0f1ef9","modified":1561109850942},{"_id":"public/categories/index.html","hash":"c3f8702275d343ec9df6ae89c99213094bfe1ee3","modified":1561109850942},{"_id":"public/tags/index.html","hash":"ce76c6fe940b5a810d70341d848f2a025f3ac4f1","modified":1561109850942},{"_id":"public/2019/06/12/万恶的1040/index.html","hash":"b9ee341e34c05ec689b3adae7ec2b2657c33ba13","modified":1561109850942},{"_id":"public/2019/06/20/Jetpack学习-LiveData/index.html","hash":"8b024f06c910a0aab8cc866be0416d43f4ef5f60","modified":1561109850942},{"_id":"public/2019/06/06/Hexo欢迎页面/index.html","hash":"008e149aa27da3bc56b9a66038ad8ab4a19a4db8","modified":1561109850942},{"_id":"public/2019/06/06/51武汉游/index.html","hash":"b65c7497185949e15a2d4152b6b90d78d3279d3e","modified":1561109850943},{"_id":"public/2019/06/05/一个高大上的名字-POJO/index.html","hash":"560c2464cfc16a4ea2eabd726ec8db8f382c24ae","modified":1561109850943},{"_id":"public/2019/06/04/Jetpack学习-DataBinding/index.html","hash":"3898cc45bb018b8e1f02a3dd92295b585d5827ac","modified":1561109850943},{"_id":"public/2019/06/03/Jetpack学习-Lifecycles/index.html","hash":"547f03786c77d9a51ff4786b5e2a4700f5d910f1","modified":1561109850943},{"_id":"public/2019/05/31/Hexo的安装及配置/index.html","hash":"64dcd12d1fc2ec9d07783ac03d5362cebb759f9b","modified":1561109850943},{"_id":"public/2019/05/28/Hexo、Hugo、 Jekyll、 Ghost对比/index.html","hash":"ecab734e118319bcf281b9278e371ae10a5a4d8f","modified":1561109850943},{"_id":"public/categories/旅游/index.html","hash":"eb5ab0d2660cf8aa4205fdc4d3e6fac42c1e65b9","modified":1561109850943},{"_id":"public/categories/web/index.html","hash":"2f6f10b29e9b1f000b95024c1bef21d0af061e16","modified":1561109850943},{"_id":"public/categories/Jetpack/index.html","hash":"24b1e41061b05f0e8489342905b7c70e0032c66c","modified":1561109850943},{"_id":"public/archives/index.html","hash":"c70d290dcb657daaf674a5ff7ee6a055c0e1ea94","modified":1561109850943},{"_id":"public/archives/2019/index.html","hash":"63c9421ef9ff46eb02aa1f59a401bda04ff0848e","modified":1561109850943},{"_id":"public/archives/2019/05/index.html","hash":"fc5d9e2ab08f6ac16d1109ef9fd247934c51558b","modified":1561109850944},{"_id":"public/archives/2019/06/index.html","hash":"f6f363a9044a5f05f1758c9bfba39f666bdf5dfc","modified":1561109850944},{"_id":"public/index.html","hash":"02f8c3050b206b52d544d84424c4ba58e2e791e1","modified":1561109850944},{"_id":"public/tags/旅游/index.html","hash":"bc87e53b2d8382c07346f7b74e31e6a195156c22","modified":1561109850944},{"_id":"public/tags/web/index.html","hash":"5669cf2fcfe3c5f5954435133aeb4c1a8d1b9cd7","modified":1561109850944},{"_id":"public/tags/静态页面生成器/index.html","hash":"0ead709b6b4566e78178682cfc8d5007691a7b1d","modified":1561109850944},{"_id":"public/tags/markdown/index.html","hash":"7000d793bcf0d5c56fae09da3a470326dd1f9af0","modified":1561109850944},{"_id":"public/tags/Hexo/index.html","hash":"a09673ac7372cc6e4daf8a6c99464b6b4990787c","modified":1561109850944},{"_id":"public/tags/databinding/index.html","hash":"903ffe5751d2d9e7af45b2acff4e7cd3c111ebb3","modified":1561109850944},{"_id":"public/tags/java/index.html","hash":"77370ad6f3f73a8b753c96ddb14adb782bd43fda","modified":1561109850944},{"_id":"public/tags/Android/index.html","hash":"8924b61e9cc0fec2228eb2878fe32ea0bd746ff2","modified":1561109850944},{"_id":"public/tags/Jetpack/index.html","hash":"8f15903b0ed0518d6a9945c2fa836fe3b685829d","modified":1561109850952},{"_id":"public/CNAME","hash":"f32cb46228cffcc5defdc9fcc92d4fb6ab6cb978","modified":1561109850952},{"_id":"public/images/avatar.jpg","hash":"de2960a846290e1a1a6561c0a16412c3a9f53744","modified":1561109850952},{"_id":"public/images/五级三晋制69800工资表.jpg","hash":"f20bc6a94b2aa3bfea0a1725ff73c7db9564ce87","modified":1561109850952},{"_id":"public/images/wechat-qcode.jpg","hash":"8d1b2103572d71aaf80317a8e00489451a50840c","modified":1561109850952},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1561109850952},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1561109850952},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1561109850952},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1561109850953},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1561109850953},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1561109850953},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1561109850953},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1561109850953},{"_id":"public/images/lifecycle-states.png","hash":"2beb80664b11bcab458f037cc5a3fe6efb7472af","modified":1561109850953},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1561109850953},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1561109850953},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1561109850953},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1561109850953},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1561109850953},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1561109850953},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1561109850953},{"_id":"public/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1561109850953},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1561109850953},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1561109850953},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1561109850954},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1561109850954},{"_id":"public/assets/css/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1561109850954},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1561109851633},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1561109851634},{"_id":"public/assets/js/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1561109851634},{"_id":"public/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1561109851643},{"_id":"public/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1561109851644},{"_id":"public/js/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1561109851644},{"_id":"public/js/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1561109851644},{"_id":"public/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1561109851644},{"_id":"public/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1561109851644},{"_id":"public/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1561109851644},{"_id":"public/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1561109851644},{"_id":"public/js/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1561109851644},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1561109851644},{"_id":"public/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1561109851644},{"_id":"public/css/main.css","hash":"3eda565423c3eab99eeaeba069d993529139a872","modified":1561109851645},{"_id":"public/images/五级三晋制晋升及工资图.jpg","hash":"3f0dfc4bd978dfd50a491774f7b237142d6225c3","modified":1561109851645},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1561109851645},{"_id":"public/js/motion.js","hash":"a16bc0b701646bf6653484675f4d5dc0f892d184","modified":1561109851659},{"_id":"public/js/utils.js","hash":"81913c5f75d0949443833cf4269ad63bd7f9be6f","modified":1561109851659},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1561109851660},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1561109851679},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1561109851686},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1561109851686},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1561109851686},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1561109851750},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1561109851780},{"_id":"public/images/wuhan/20190503_170337.jpg","hash":"f32dbe5677afb14b5d75532ae0b52188cecbd190","modified":1561109851790},{"_id":"public/images/wuhan/20190503_170120.jpg","hash":"c329d0c1dfad74926834b10ce7a65106eef42f4f","modified":1561109851796},{"_id":"public/images/wuhan/20190503_173152.jpg","hash":"13cc32c6fdb480f0d1d28d3cfde4a75747d76461","modified":1561109851819},{"_id":"public/images/wuhan/20190503_170529.jpg","hash":"6ed953333b210affa188ae9d45e428b300be2bb4","modified":1561109851823},{"_id":"public/images/wuhan/20190503_173412.jpg","hash":"aed368d8805bbe025094e417223342ae114d3e18","modified":1561109851828},{"_id":"public/images/wuhan/20190503_165947.jpg","hash":"d41abb59d7f8360a74d15dc525ea1ac46b6ee3d3","modified":1561109851841},{"_id":"public/images/wuhan/20190503_170611.jpg","hash":"f67a76989891a64a1abc4b0cf869bba2333f347d","modified":1561109851842},{"_id":"public/images/wuhan/20190503_165748.jpg","hash":"e01a39a8755b1a4cb7bdeae9133051bd738c0c60","modified":1561109851871},{"_id":"public/images/wuhan/20190503_173219.jpg","hash":"5d54c0be7fb262ae799ff358db52ef143d37b91f","modified":1561109851896},{"_id":"public/images/wuhan/20190503_173538.jpg","hash":"748ed6a567652d479ceccbb4e7ac973963b56e6a","modified":1561109851901},{"_id":"public/videos/20190504_132327.mp4","hash":"1fd26a0b32cbdfabb79185f3fe2c6c9e5f2df134","modified":1561109852158},{"_id":"public/videos/20190504_132411.mp4","hash":"885e7876e403d623feb36ea1529d82dce537cd79","modified":1561109852238}],"Category":[{"name":"旅游","_id":"cjx5whsw00005rwtkjd9vyrjj"},{"name":"web","_id":"cjx5whsw7000brwtk9bcxq2kx"},{"name":"Jetpack","_id":"cjx5whswf000lrwtkbk2ej72f"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"�ص��ҵ���ҳ\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"�ص��ҵ���ҳ\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","date":"2019-05-30T02:36:03.860Z","updated":"2019-05-30T02:36:03.860Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cjx5whsp20000rwtknymg5g2e","content":"<!DOCTYPE HTML>\n<html>\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"�ص��ҵ���ҳ\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"�ص��ҵ���ҳ\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>"},{"title":"关于","date":"2019-05-29T07:24:00.000Z","_content":"\n\n\n李平，Android开发工程师，现居北京，过着无忧无虑的生活。","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2019-05-29 15:24:00\n---\n\n\n\n李平，Android开发工程师，现居北京，过着无忧无虑的生活。","updated":"2019-05-29T07:31:06.561Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjx5whsvp0001rwtk0inah4oq","content":"<p>李平，Android开发工程师，现居北京，过着无忧无虑的生活。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>李平，Android开发工程师，现居北京，过着无忧无虑的生活。</p>\n"},{"title":"分类","date":"2019-05-29T08:42:16.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2019-05-29 16:42:16\ntype: categories\n---\n","updated":"2019-05-29T08:46:07.270Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjx5whsvw0003rwtk968tvj09","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2019-05-29T08:31:08.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-05-29 16:31:08\ntype: tags\n---\n","updated":"2019-05-30T02:54:44.877Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjx5whsw20007rwtkr5vz5145","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"51武汉游","date":"2019-06-06T02:08:19.000Z","_content":"\n{% dplayer \"url=/videos/20190504_132411.mp4\" \"pic=/images/wuhan/20190503_170611.jpg\" \"id=9E2E3368B56CDBB4\" \"loop=yes\" \"theme=#FADFA3\" \"autoplay=false\" \"token=tokendemo\" %}","source":"_posts/51武汉游.md","raw":"---\ntitle: 51武汉游\ndate: 2019-06-06 10:08:19\ntags: [旅游]\ncategories: 旅游\n---\n\n{% dplayer \"url=/videos/20190504_132411.mp4\" \"pic=/images/wuhan/20190503_170611.jpg\" \"id=9E2E3368B56CDBB4\" \"loop=yes\" \"theme=#FADFA3\" \"autoplay=false\" \"token=tokendemo\" %}","slug":"51武汉游","published":1,"updated":"2019-06-06T02:38:36.740Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjx5whsvq0002rwtkuzh73qh2","content":"<div id=\"dplayer0\" class=\"dplayer hexo-tag-dplayer-mark\" style=\"margin-bottom: 20px;\"></div><script>(function(){var player = new DPlayer({\"container\":document.getElementById(\"dplayer0\"),\"theme\":\"#FADFA3\",\"loop\":true,\"video\":{\"url\":\"/videos/20190504_132411.mp4\",\"pic\":\"/images/wuhan/20190503_170611.jpg\"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>","site":{"data":{}},"excerpt":"","more":"<div id=\"dplayer0\" class=\"dplayer hexo-tag-dplayer-mark\" style=\"margin-bottom: 20px;\"></div><script>(function(){var player = new DPlayer({\"container\":document.getElementById(\"dplayer0\"),\"theme\":\"#FADFA3\",\"loop\":true,\"video\":{\"url\":\"/videos/20190504_132411.mp4\",\"pic\":\"/images/wuhan/20190503_170611.jpg\"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>"},{"title":"Hexo、Hugo、Jekyll、Ghost的比较","date":"2019-05-28T09:04:04.000Z","type":"tags","_content":"Hexo、Hugo、 Jekyll、 Ghost都是生成静态网站的框架。\n我们先来比较一下：（Github上4个框架的数据来自2019年5月28号）\n\n|        | Github star数量 | issues(open) | issues(close) |    语言    | 多语言 | 收费 |\n| :----: | :-------------: | :----------: | :-----------: | :--------: | :----: | :--: |\n|  Hexo  |      26.6k      |     196      |     2934      | JavaScript |  支持  | 不收 |\n|  Hugo  |      35.4k      |     324      |     3367      |     Go     | 不确定 | 不收 |\n| Jekyll |      37.8k      |     196      |     1934      |    Ruby    | 不确定 | 不收 |\n| Ghost  |      30.0k      |      82      |     5310      | JavaScript | 不确定 |  收  |\n\n从表格可以看出（综合Github star和issues来看）\n1. 最活跃的框架是Ghost，没错，因为Ghost是收费的。对于一个只想玩玩的个人开发者来说，我并不建议使用Ghost来搭建个人博客。\n2. Jekyll最受欢迎，并且免费。\n\n","source":"_posts/Hexo、Hugo、 Jekyll、 Ghost对比.md","raw":"---\ntitle: Hexo、Hugo、Jekyll、Ghost的比较\ndate: 2019-05-28 17:04:04\ntype: \"tags\"\ntags: [web,静态页面生成器,markdown]\ncategories: web\n---\nHexo、Hugo、 Jekyll、 Ghost都是生成静态网站的框架。\n我们先来比较一下：（Github上4个框架的数据来自2019年5月28号）\n\n|        | Github star数量 | issues(open) | issues(close) |    语言    | 多语言 | 收费 |\n| :----: | :-------------: | :----------: | :-----------: | :--------: | :----: | :--: |\n|  Hexo  |      26.6k      |     196      |     2934      | JavaScript |  支持  | 不收 |\n|  Hugo  |      35.4k      |     324      |     3367      |     Go     | 不确定 | 不收 |\n| Jekyll |      37.8k      |     196      |     1934      |    Ruby    | 不确定 | 不收 |\n| Ghost  |      30.0k      |      82      |     5310      | JavaScript | 不确定 |  收  |\n\n从表格可以看出（综合Github star和issues来看）\n1. 最活跃的框架是Ghost，没错，因为Ghost是收费的。对于一个只想玩玩的个人开发者来说，我并不建议使用Ghost来搭建个人博客。\n2. Jekyll最受欢迎，并且免费。\n\n","slug":"Hexo、Hugo、 Jekyll、 Ghost对比","published":1,"updated":"2019-05-30T03:50:32.517Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjx5whsvx0004rwtki9qwom8d","content":"<p>Hexo、Hugo、 Jekyll、 Ghost都是生成静态网站的框架。<br>我们先来比较一下：（Github上4个框架的数据来自2019年5月28号）</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">Github star数量</th>\n<th style=\"text-align:center\">issues(open)</th>\n<th style=\"text-align:center\">issues(close)</th>\n<th style=\"text-align:center\">语言</th>\n<th style=\"text-align:center\">多语言</th>\n<th style=\"text-align:center\">收费</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Hexo</td>\n<td style=\"text-align:center\">26.6k</td>\n<td style=\"text-align:center\">196</td>\n<td style=\"text-align:center\">2934</td>\n<td style=\"text-align:center\">JavaScript</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">不收</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Hugo</td>\n<td style=\"text-align:center\">35.4k</td>\n<td style=\"text-align:center\">324</td>\n<td style=\"text-align:center\">3367</td>\n<td style=\"text-align:center\">Go</td>\n<td style=\"text-align:center\">不确定</td>\n<td style=\"text-align:center\">不收</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Jekyll</td>\n<td style=\"text-align:center\">37.8k</td>\n<td style=\"text-align:center\">196</td>\n<td style=\"text-align:center\">1934</td>\n<td style=\"text-align:center\">Ruby</td>\n<td style=\"text-align:center\">不确定</td>\n<td style=\"text-align:center\">不收</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ghost</td>\n<td style=\"text-align:center\">30.0k</td>\n<td style=\"text-align:center\">82</td>\n<td style=\"text-align:center\">5310</td>\n<td style=\"text-align:center\">JavaScript</td>\n<td style=\"text-align:center\">不确定</td>\n<td style=\"text-align:center\">收</td>\n</tr>\n</tbody>\n</table>\n<p>从表格可以看出（综合Github star和issues来看）</p>\n<ol>\n<li>最活跃的框架是Ghost，没错，因为Ghost是收费的。对于一个只想玩玩的个人开发者来说，我并不建议使用Ghost来搭建个人博客。</li>\n<li>Jekyll最受欢迎，并且免费。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>Hexo、Hugo、 Jekyll、 Ghost都是生成静态网站的框架。<br>我们先来比较一下：（Github上4个框架的数据来自2019年5月28号）</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">Github star数量</th>\n<th style=\"text-align:center\">issues(open)</th>\n<th style=\"text-align:center\">issues(close)</th>\n<th style=\"text-align:center\">语言</th>\n<th style=\"text-align:center\">多语言</th>\n<th style=\"text-align:center\">收费</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Hexo</td>\n<td style=\"text-align:center\">26.6k</td>\n<td style=\"text-align:center\">196</td>\n<td style=\"text-align:center\">2934</td>\n<td style=\"text-align:center\">JavaScript</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">不收</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Hugo</td>\n<td style=\"text-align:center\">35.4k</td>\n<td style=\"text-align:center\">324</td>\n<td style=\"text-align:center\">3367</td>\n<td style=\"text-align:center\">Go</td>\n<td style=\"text-align:center\">不确定</td>\n<td style=\"text-align:center\">不收</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Jekyll</td>\n<td style=\"text-align:center\">37.8k</td>\n<td style=\"text-align:center\">196</td>\n<td style=\"text-align:center\">1934</td>\n<td style=\"text-align:center\">Ruby</td>\n<td style=\"text-align:center\">不确定</td>\n<td style=\"text-align:center\">不收</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ghost</td>\n<td style=\"text-align:center\">30.0k</td>\n<td style=\"text-align:center\">82</td>\n<td style=\"text-align:center\">5310</td>\n<td style=\"text-align:center\">JavaScript</td>\n<td style=\"text-align:center\">不确定</td>\n<td style=\"text-align:center\">收</td>\n</tr>\n</tbody>\n</table>\n<p>从表格可以看出（综合Github star和issues来看）</p>\n<ol>\n<li>最活跃的框架是Ghost，没错，因为Ghost是收费的。对于一个只想玩玩的个人开发者来说，我并不建议使用Ghost来搭建个人博客。</li>\n<li>Jekyll最受欢迎，并且免费。</li>\n</ol>\n"},{"title":"欢迎使用Hexo","_content":"欢迎来到 [Hexo](https://hexo.io/)！ 你可以在 [Hexo文档](https://hexo.io/docs/) 中获取更多信息。 如果你在使用Hexo过程中遇到任何问题，你可以在[故障排除](https://hexo.io/docs/troubleshooting.html)寻找答案，或者你可以在 [GitHub](https://github.com/hexojs/hexo/issues)寻找答案。\n\n## 快速开始\n\n### 新建一篇博客\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\n更多信息请查看: [writing](https://hexo.io/docs/writing.html)\n\n### 在本地服务中运行\n\n``` bash\n$ hexo server\n```\n\n更多信息请查看: [server](https://hexo.io/docs/server.html)\n\n### 生成静态文件\n\n``` bash\n$ hexo generate\n```\n\n更多信息请查看: [generating](https://hexo.io/docs/generating.html)\n\n### 部署到远程网站\n\n``` bash\n$ hexo deploy\n```\n\n更多信息请查看: [deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/Hexo欢迎页面.md","raw":"---\ntitle: 欢迎使用Hexo\n---\n欢迎来到 [Hexo](https://hexo.io/)！ 你可以在 [Hexo文档](https://hexo.io/docs/) 中获取更多信息。 如果你在使用Hexo过程中遇到任何问题，你可以在[故障排除](https://hexo.io/docs/troubleshooting.html)寻找答案，或者你可以在 [GitHub](https://github.com/hexojs/hexo/issues)寻找答案。\n\n## 快速开始\n\n### 新建一篇博客\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\n更多信息请查看: [writing](https://hexo.io/docs/writing.html)\n\n### 在本地服务中运行\n\n``` bash\n$ hexo server\n```\n\n更多信息请查看: [server](https://hexo.io/docs/server.html)\n\n### 生成静态文件\n\n``` bash\n$ hexo generate\n```\n\n更多信息请查看: [generating](https://hexo.io/docs/generating.html)\n\n### 部署到远程网站\n\n``` bash\n$ hexo deploy\n```\n\n更多信息请查看: [deployment](https://hexo.io/docs/deployment.html)\n","slug":"Hexo欢迎页面","published":1,"date":"2019-06-06T02:50:18.969Z","updated":"2019-05-31T06:58:29.483Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjx5whsw30008rwtkxjt6tooq","content":"<p>欢迎来到 <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>！ 你可以在 <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">Hexo文档</a> 中获取更多信息。 如果你在使用Hexo过程中遇到任何问题，你可以在<a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">故障排除</a>寻找答案，或者你可以在 <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>寻找答案。</p>\n<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><h3 id=\"新建一篇博客\"><a href=\"#新建一篇博客\" class=\"headerlink\" title=\"新建一篇博客\"></a>新建一篇博客</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>更多信息请查看: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">writing</a></p>\n<h3 id=\"在本地服务中运行\"><a href=\"#在本地服务中运行\" class=\"headerlink\" title=\"在本地服务中运行\"></a>在本地服务中运行</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>更多信息请查看: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">server</a></p>\n<h3 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>更多信息请查看: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">generating</a></p>\n<h3 id=\"部署到远程网站\"><a href=\"#部署到远程网站\" class=\"headerlink\" title=\"部署到远程网站\"></a>部署到远程网站</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>更多信息请查看: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>欢迎来到 <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>！ 你可以在 <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">Hexo文档</a> 中获取更多信息。 如果你在使用Hexo过程中遇到任何问题，你可以在<a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">故障排除</a>寻找答案，或者你可以在 <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>寻找答案。</p>\n<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><h3 id=\"新建一篇博客\"><a href=\"#新建一篇博客\" class=\"headerlink\" title=\"新建一篇博客\"></a>新建一篇博客</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>更多信息请查看: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">writing</a></p>\n<h3 id=\"在本地服务中运行\"><a href=\"#在本地服务中运行\" class=\"headerlink\" title=\"在本地服务中运行\"></a>在本地服务中运行</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>更多信息请查看: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">server</a></p>\n<h3 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>更多信息请查看: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">generating</a></p>\n<h3 id=\"部署到远程网站\"><a href=\"#部署到远程网站\" class=\"headerlink\" title=\"部署到远程网站\"></a>部署到远程网站</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>更多信息请查看: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">deployment</a></p>\n"},{"title":"万恶的1040","date":"2019-06-12T07:20:07.000Z","_content":"\n![](\\images\\五级三晋制晋升及工资图.jpg)\n\n![](\\images\\五级三晋制69800工资表.jpg)\n\n接着说一下如何拿到1040万。","source":"_posts/万恶的1040.md","raw":"---\ntitle: 万恶的1040\ndate: 2019-06-12 15:20:07\ntags:\n---\n\n![](\\images\\五级三晋制晋升及工资图.jpg)\n\n![](\\images\\五级三晋制69800工资表.jpg)\n\n接着说一下如何拿到1040万。","slug":"万恶的1040","published":1,"updated":"2019-06-12T07:24:12.107Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjx5whsw40009rwtkq7w2jp30","content":"<p><img src=\"\\images\\五级三晋制晋升及工资图.jpg\" alt></p>\n<p><img src=\"\\images\\五级三晋制69800工资表.jpg\" alt></p>\n<p>接着说一下如何拿到1040万。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"\\images\\五级三晋制晋升及工资图.jpg\" alt></p>\n<p><img src=\"\\images\\五级三晋制69800工资表.jpg\" alt></p>\n<p>接着说一下如何拿到1040万。</p>\n"},{"title":"Hexo在Windows下的安装及配置","date":"2019-05-31T06:37:05.000Z","_content":"\n\n##### 安装Git\n\n下载[git-for-windows](https://gitforwindows.org/) ，然后一步一步安装。\n\n##### 安装Node\n\n下载[node](https://nodejs.org/en/download/) ，然后一步一步安装。\n\n##### 安装Hexo\n\n``` bash\nnpm install hexo-cli -g \n```\n\n\n##### Hexo的初始化\n\n``` bash\nhexo init blog\ncd blog\nnpm install\n```\n##### Hexo的本地测试\n\n``` bash\nhexo s\n```\n##### Hexo部署\n\n首先在你的github新建一个仓库，名字必须为仓库名.github.io。\n打开blog根目录下的_config.yml文件，加入或修改成以下配置\n\n```\ndeploy:\ntype: git\nrepo: git@github.com:仓库名/仓库名.github.io.git\nbranch: master\n```","source":"_posts/Hexo的安装及配置.md","raw":"---\ntitle: Hexo在Windows下的安装及配置\ndate: 2019-05-31 14:37:05\ntags: [Hexo]\ncategories: [web]\n---\n\n\n##### 安装Git\n\n下载[git-for-windows](https://gitforwindows.org/) ，然后一步一步安装。\n\n##### 安装Node\n\n下载[node](https://nodejs.org/en/download/) ，然后一步一步安装。\n\n##### 安装Hexo\n\n``` bash\nnpm install hexo-cli -g \n```\n\n\n##### Hexo的初始化\n\n``` bash\nhexo init blog\ncd blog\nnpm install\n```\n##### Hexo的本地测试\n\n``` bash\nhexo s\n```\n##### Hexo部署\n\n首先在你的github新建一个仓库，名字必须为仓库名.github.io。\n打开blog根目录下的_config.yml文件，加入或修改成以下配置\n\n```\ndeploy:\ntype: git\nrepo: git@github.com:仓库名/仓库名.github.io.git\nbranch: master\n```","slug":"Hexo的安装及配置","published":1,"updated":"2019-06-03T02:32:25.898Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjx5whsw5000arwtk5xjoqf87","content":"<h5 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h5><p>下载<a href=\"https://gitforwindows.org/\" target=\"_blank\" rel=\"noopener\">git-for-windows</a> ，然后一步一步安装。</p>\n<h5 id=\"安装Node\"><a href=\"#安装Node\" class=\"headerlink\" title=\"安装Node\"></a>安装Node</h5><p>下载<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">node</a> ，然后一步一步安装。</p>\n<h5 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n<h5 id=\"Hexo的初始化\"><a href=\"#Hexo的初始化\" class=\"headerlink\" title=\"Hexo的初始化\"></a>Hexo的初始化</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init blog</span><br><span class=\"line\"><span class=\"built_in\">cd</span> blog</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h5 id=\"Hexo的本地测试\"><a href=\"#Hexo的本地测试\" class=\"headerlink\" title=\"Hexo的本地测试\"></a>Hexo的本地测试</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<h5 id=\"Hexo部署\"><a href=\"#Hexo部署\" class=\"headerlink\" title=\"Hexo部署\"></a>Hexo部署</h5><p>首先在你的github新建一个仓库，名字必须为仓库名.github.io。<br>打开blog根目录下的_config.yml文件，加入或修改成以下配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">type: git</span><br><span class=\"line\">repo: git@github.com:仓库名/仓库名.github.io.git</span><br><span class=\"line\">branch: master</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h5 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h5><p>下载<a href=\"https://gitforwindows.org/\" target=\"_blank\" rel=\"noopener\">git-for-windows</a> ，然后一步一步安装。</p>\n<h5 id=\"安装Node\"><a href=\"#安装Node\" class=\"headerlink\" title=\"安装Node\"></a>安装Node</h5><p>下载<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">node</a> ，然后一步一步安装。</p>\n<h5 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n<h5 id=\"Hexo的初始化\"><a href=\"#Hexo的初始化\" class=\"headerlink\" title=\"Hexo的初始化\"></a>Hexo的初始化</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init blog</span><br><span class=\"line\"><span class=\"built_in\">cd</span> blog</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h5 id=\"Hexo的本地测试\"><a href=\"#Hexo的本地测试\" class=\"headerlink\" title=\"Hexo的本地测试\"></a>Hexo的本地测试</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<h5 id=\"Hexo部署\"><a href=\"#Hexo部署\" class=\"headerlink\" title=\"Hexo部署\"></a>Hexo部署</h5><p>首先在你的github新建一个仓库，名字必须为仓库名.github.io。<br>打开blog根目录下的_config.yml文件，加入或修改成以下配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">type: git</span><br><span class=\"line\">repo: git@github.com:仓库名/仓库名.github.io.git</span><br><span class=\"line\">branch: master</span><br></pre></td></tr></table></figure>"},{"title":"一个高大上的名字-POJO","date":"2019-06-05T02:37:55.000Z","_content":"\n##### POJO\n\n名字乍一看都会被吓到，但是POJO其实很简单，下面的段落部分摘抄自 [这位博主](https://www.jianshu.com/p/6f3e2bd50cb1) 。\n\nPOJO的创始人([martinfowler](https://link.jianshu.com/?t=https://www.martinfowler.com/bliki/POJO.html))博客：\n\nThe term was coined while Rebecca Parsons, Josh MacKenzie and I were preparing for a talk at a conference in September 2000. In the talk we were pointing out the many benefits of encoding business logic into regular java objects rather than using Entity Beans. We wondered why people were so against using regular objects in their systems and concluded that it was because simple objects lacked a fancy name. So we gave them one, and it's caught on very nicely.\n...在谈话中我们指出，编写业务逻辑的时候，使用常规的java对象要比实体bean要好的多。我们怀疑为什么一些人极力反对在他们的代码中使用常规对象，还辩解称因为这些常规对象没有一个花哨的名字，所以我们给他们起了一个非常好听的名字。（Plain Old Java Object）\n\n维基百科原文\n\nThe term \"POJO\" initially denoted a Java object which does not follow any of the major Java object models, conventions, or frameworks; nowadays \"POJO\" may be used as an acronym for \"Plain Old JavaScript Object\" as well, in which case the term denotes a JavaScript object of similar pedigree.[2]\n术语POJO起初表示为不遵任何主要的java模型，约定或者框架的java对象，现在，pojo也可以用作'Plain Old JavaScript Object'的缩写，这样的话和javascript对象有着相似的渊源。\n\n##### JavaBean\n\n[维基百科](https://link.jianshu.com/?t=https://en.wikipedia.org/wiki/JavaBeans)中JavaBeans的概念\n\nA JavaBean is a POJO that is serializable, has a no-argument constructor, and allows access to properties using getter and setter methods that follow a simple naming convention. Because of this convention, simple declarative references can be made to the properties of arbitrary JavaBeans. Code using such a declarative reference does not have to know anything about the type of the bean, and the bean can be used with many frameworks without these frameworks having to know the exact type of the bean. The JavaBeans specification, if fully implemented, slightly breaks the POJO model as the class must implement the Serializable interface to be a true JavaBean. Many POJO classes still called JavaBeans do not meet this requirement. Since Serializable is a marker (method-less) interface, this is not much of a burden.\nJavaBean是一个可序列化的POJO，具有一个无参构造器，并且允许使用遵循简单命名约定的getter和setter方法来访问属性。由于这个惯例，可以对任意JavaBean属性进行简单的声明引用。使用这种声明引用的代码不需要知道bean的具体类型。并且，这个bean还可以被很多框架使用，这些java框架也不需要知道bean的类型。由于java.io.Serializable是一个标记接口（无方法），所以这并不是一个多大的负担。如果JavaBean完全实现的话，稍微打破了一些POJO模型。很多被称之为JavaBean的POJO类并不符合这个要求，因为JavaBean必须实现Serializable接口才能成为真正的JavaBean。\n\n有些人看上面一堆肯定头疼，不如上点代码：\n\n```java\npublic class POJO {\n    private String name;\n    private String id;\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public String getId() {\n        return id;\n    }\n    public void setId(String id) {\n        this.id = id;\n    }\n}\n```\n\n```java\n public class JavaBean implements Serializable{\n    private String name;\n    private String id;\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public String getId() {\n        return id;\n    }\n    public void setId(String id) {\n        this.id = id;\n    }\n    public void eat(){\n        System.out.println(name+\"吃了满汉全席！\");\n    }\n}\n```\n\n##### 总结来讲：\n\n- POJO就是一个只有属性和get、set方法的简单类。\n- JavaBean在POJO的基础上实现了持久化并且使其拥有了行为。","source":"_posts/一个高大上的名字-POJO.md","raw":"---\ntitle: 一个高大上的名字-POJO\ndate: 2019-06-05 10:37:55\ntags: [databinding,java]\ncategories: Jetpack\n---\n\n##### POJO\n\n名字乍一看都会被吓到，但是POJO其实很简单，下面的段落部分摘抄自 [这位博主](https://www.jianshu.com/p/6f3e2bd50cb1) 。\n\nPOJO的创始人([martinfowler](https://link.jianshu.com/?t=https://www.martinfowler.com/bliki/POJO.html))博客：\n\nThe term was coined while Rebecca Parsons, Josh MacKenzie and I were preparing for a talk at a conference in September 2000. In the talk we were pointing out the many benefits of encoding business logic into regular java objects rather than using Entity Beans. We wondered why people were so against using regular objects in their systems and concluded that it was because simple objects lacked a fancy name. So we gave them one, and it's caught on very nicely.\n...在谈话中我们指出，编写业务逻辑的时候，使用常规的java对象要比实体bean要好的多。我们怀疑为什么一些人极力反对在他们的代码中使用常规对象，还辩解称因为这些常规对象没有一个花哨的名字，所以我们给他们起了一个非常好听的名字。（Plain Old Java Object）\n\n维基百科原文\n\nThe term \"POJO\" initially denoted a Java object which does not follow any of the major Java object models, conventions, or frameworks; nowadays \"POJO\" may be used as an acronym for \"Plain Old JavaScript Object\" as well, in which case the term denotes a JavaScript object of similar pedigree.[2]\n术语POJO起初表示为不遵任何主要的java模型，约定或者框架的java对象，现在，pojo也可以用作'Plain Old JavaScript Object'的缩写，这样的话和javascript对象有着相似的渊源。\n\n##### JavaBean\n\n[维基百科](https://link.jianshu.com/?t=https://en.wikipedia.org/wiki/JavaBeans)中JavaBeans的概念\n\nA JavaBean is a POJO that is serializable, has a no-argument constructor, and allows access to properties using getter and setter methods that follow a simple naming convention. Because of this convention, simple declarative references can be made to the properties of arbitrary JavaBeans. Code using such a declarative reference does not have to know anything about the type of the bean, and the bean can be used with many frameworks without these frameworks having to know the exact type of the bean. The JavaBeans specification, if fully implemented, slightly breaks the POJO model as the class must implement the Serializable interface to be a true JavaBean. Many POJO classes still called JavaBeans do not meet this requirement. Since Serializable is a marker (method-less) interface, this is not much of a burden.\nJavaBean是一个可序列化的POJO，具有一个无参构造器，并且允许使用遵循简单命名约定的getter和setter方法来访问属性。由于这个惯例，可以对任意JavaBean属性进行简单的声明引用。使用这种声明引用的代码不需要知道bean的具体类型。并且，这个bean还可以被很多框架使用，这些java框架也不需要知道bean的类型。由于java.io.Serializable是一个标记接口（无方法），所以这并不是一个多大的负担。如果JavaBean完全实现的话，稍微打破了一些POJO模型。很多被称之为JavaBean的POJO类并不符合这个要求，因为JavaBean必须实现Serializable接口才能成为真正的JavaBean。\n\n有些人看上面一堆肯定头疼，不如上点代码：\n\n```java\npublic class POJO {\n    private String name;\n    private String id;\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public String getId() {\n        return id;\n    }\n    public void setId(String id) {\n        this.id = id;\n    }\n}\n```\n\n```java\n public class JavaBean implements Serializable{\n    private String name;\n    private String id;\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public String getId() {\n        return id;\n    }\n    public void setId(String id) {\n        this.id = id;\n    }\n    public void eat(){\n        System.out.println(name+\"吃了满汉全席！\");\n    }\n}\n```\n\n##### 总结来讲：\n\n- POJO就是一个只有属性和get、set方法的简单类。\n- JavaBean在POJO的基础上实现了持久化并且使其拥有了行为。","slug":"一个高大上的名字-POJO","published":1,"updated":"2019-06-05T06:16:15.858Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjx5whsw8000erwtkhqeh0sdk","content":"<h5 id=\"POJO\"><a href=\"#POJO\" class=\"headerlink\" title=\"POJO\"></a>POJO</h5><p>名字乍一看都会被吓到，但是POJO其实很简单，下面的段落部分摘抄自 <a href=\"https://www.jianshu.com/p/6f3e2bd50cb1\" target=\"_blank\" rel=\"noopener\">这位博主</a> 。</p>\n<p>POJO的创始人(<a href=\"https://link.jianshu.com/?t=https://www.martinfowler.com/bliki/POJO.html\" target=\"_blank\" rel=\"noopener\">martinfowler</a>)博客：</p>\n<p>The term was coined while Rebecca Parsons, Josh MacKenzie and I were preparing for a talk at a conference in September 2000. In the talk we were pointing out the many benefits of encoding business logic into regular java objects rather than using Entity Beans. We wondered why people were so against using regular objects in their systems and concluded that it was because simple objects lacked a fancy name. So we gave them one, and it’s caught on very nicely.<br>…在谈话中我们指出，编写业务逻辑的时候，使用常规的java对象要比实体bean要好的多。我们怀疑为什么一些人极力反对在他们的代码中使用常规对象，还辩解称因为这些常规对象没有一个花哨的名字，所以我们给他们起了一个非常好听的名字。（Plain Old Java Object）</p>\n<p>维基百科原文</p>\n<p>The term “POJO” initially denoted a Java object which does not follow any of the major Java object models, conventions, or frameworks; nowadays “POJO” may be used as an acronym for “Plain Old JavaScript Object” as well, in which case the term denotes a JavaScript object of similar pedigree.[2]<br>术语POJO起初表示为不遵任何主要的java模型，约定或者框架的java对象，现在，pojo也可以用作’Plain Old JavaScript Object’的缩写，这样的话和javascript对象有着相似的渊源。</p>\n<h5 id=\"JavaBean\"><a href=\"#JavaBean\" class=\"headerlink\" title=\"JavaBean\"></a>JavaBean</h5><p><a href=\"https://link.jianshu.com/?t=https://en.wikipedia.org/wiki/JavaBeans\" target=\"_blank\" rel=\"noopener\">维基百科</a>中JavaBeans的概念</p>\n<p>A JavaBean is a POJO that is serializable, has a no-argument constructor, and allows access to properties using getter and setter methods that follow a simple naming convention. Because of this convention, simple declarative references can be made to the properties of arbitrary JavaBeans. Code using such a declarative reference does not have to know anything about the type of the bean, and the bean can be used with many frameworks without these frameworks having to know the exact type of the bean. The JavaBeans specification, if fully implemented, slightly breaks the POJO model as the class must implement the Serializable interface to be a true JavaBean. Many POJO classes still called JavaBeans do not meet this requirement. Since Serializable is a marker (method-less) interface, this is not much of a burden.<br>JavaBean是一个可序列化的POJO，具有一个无参构造器，并且允许使用遵循简单命名约定的getter和setter方法来访问属性。由于这个惯例，可以对任意JavaBean属性进行简单的声明引用。使用这种声明引用的代码不需要知道bean的具体类型。并且，这个bean还可以被很多框架使用，这些java框架也不需要知道bean的类型。由于java.io.Serializable是一个标记接口（无方法），所以这并不是一个多大的负担。如果JavaBean完全实现的话，稍微打破了一些POJO模型。很多被称之为JavaBean的POJO类并不符合这个要求，因为JavaBean必须实现Serializable接口才能成为真正的JavaBean。</p>\n<p>有些人看上面一堆肯定头疼，不如上点代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">POJO</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(String id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaBean</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(String id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(name+<span class=\"string\">\"吃了满汉全席！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"总结来讲：\"><a href=\"#总结来讲：\" class=\"headerlink\" title=\"总结来讲：\"></a>总结来讲：</h5><ul>\n<li>POJO就是一个只有属性和get、set方法的简单类。</li>\n<li>JavaBean在POJO的基础上实现了持久化并且使其拥有了行为。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"POJO\"><a href=\"#POJO\" class=\"headerlink\" title=\"POJO\"></a>POJO</h5><p>名字乍一看都会被吓到，但是POJO其实很简单，下面的段落部分摘抄自 <a href=\"https://www.jianshu.com/p/6f3e2bd50cb1\" target=\"_blank\" rel=\"noopener\">这位博主</a> 。</p>\n<p>POJO的创始人(<a href=\"https://link.jianshu.com/?t=https://www.martinfowler.com/bliki/POJO.html\" target=\"_blank\" rel=\"noopener\">martinfowler</a>)博客：</p>\n<p>The term was coined while Rebecca Parsons, Josh MacKenzie and I were preparing for a talk at a conference in September 2000. In the talk we were pointing out the many benefits of encoding business logic into regular java objects rather than using Entity Beans. We wondered why people were so against using regular objects in their systems and concluded that it was because simple objects lacked a fancy name. So we gave them one, and it’s caught on very nicely.<br>…在谈话中我们指出，编写业务逻辑的时候，使用常规的java对象要比实体bean要好的多。我们怀疑为什么一些人极力反对在他们的代码中使用常规对象，还辩解称因为这些常规对象没有一个花哨的名字，所以我们给他们起了一个非常好听的名字。（Plain Old Java Object）</p>\n<p>维基百科原文</p>\n<p>The term “POJO” initially denoted a Java object which does not follow any of the major Java object models, conventions, or frameworks; nowadays “POJO” may be used as an acronym for “Plain Old JavaScript Object” as well, in which case the term denotes a JavaScript object of similar pedigree.[2]<br>术语POJO起初表示为不遵任何主要的java模型，约定或者框架的java对象，现在，pojo也可以用作’Plain Old JavaScript Object’的缩写，这样的话和javascript对象有着相似的渊源。</p>\n<h5 id=\"JavaBean\"><a href=\"#JavaBean\" class=\"headerlink\" title=\"JavaBean\"></a>JavaBean</h5><p><a href=\"https://link.jianshu.com/?t=https://en.wikipedia.org/wiki/JavaBeans\" target=\"_blank\" rel=\"noopener\">维基百科</a>中JavaBeans的概念</p>\n<p>A JavaBean is a POJO that is serializable, has a no-argument constructor, and allows access to properties using getter and setter methods that follow a simple naming convention. Because of this convention, simple declarative references can be made to the properties of arbitrary JavaBeans. Code using such a declarative reference does not have to know anything about the type of the bean, and the bean can be used with many frameworks without these frameworks having to know the exact type of the bean. The JavaBeans specification, if fully implemented, slightly breaks the POJO model as the class must implement the Serializable interface to be a true JavaBean. Many POJO classes still called JavaBeans do not meet this requirement. Since Serializable is a marker (method-less) interface, this is not much of a burden.<br>JavaBean是一个可序列化的POJO，具有一个无参构造器，并且允许使用遵循简单命名约定的getter和setter方法来访问属性。由于这个惯例，可以对任意JavaBean属性进行简单的声明引用。使用这种声明引用的代码不需要知道bean的具体类型。并且，这个bean还可以被很多框架使用，这些java框架也不需要知道bean的类型。由于java.io.Serializable是一个标记接口（无方法），所以这并不是一个多大的负担。如果JavaBean完全实现的话，稍微打破了一些POJO模型。很多被称之为JavaBean的POJO类并不符合这个要求，因为JavaBean必须实现Serializable接口才能成为真正的JavaBean。</p>\n<p>有些人看上面一堆肯定头疼，不如上点代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">POJO</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(String id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaBean</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(String id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(name+<span class=\"string\">\"吃了满汉全席！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"总结来讲：\"><a href=\"#总结来讲：\" class=\"headerlink\" title=\"总结来讲：\"></a>总结来讲：</h5><ul>\n<li>POJO就是一个只有属性和get、set方法的简单类。</li>\n<li>JavaBean在POJO的基础上实现了持久化并且使其拥有了行为。</li>\n</ul>\n"},{"title":"Jetpack学习-LiveData","date":"2019-06-20T01:44:45.000Z","_content":"\n##### LiveData的基本使用\n\n1. 新建一个LiveData实例，通常在ViewModel中创建；\n2. 建立一个Observer对象，覆写onChanged()；\n3. 调用liveData.observer(LifeCycleOwner,Observer)；\n\n代码如下\n\n```xml\nimplementation 'androidx.lifecycle:lifecycle-extensions:2.0.0-beta01'\n```\n\n```kotlin\nclass NameViewModel : ViewModel() {\n    // Create a LiveData with a String\n    val currentName: MutableLiveData<String> by lazy {\n        MutableLiveData<String>()\n    }\n    // Rest of the ViewModel...\n}\n```\n\n```kotlin\nclass NameActivity : AppCompatActivity() {\n    private lateinit var model: NameViewModel\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        // Other code to setup the activity...\n        // Get the ViewModel.\n        model = ViewModelProviders.of(this).get(NameViewModel::class.java)\n        // Create the observer which updates the UI.\n        val nameObserver = Observer<String> { newName ->\n            // Update the UI, in this case, a TextView.\n            nameTextView.text = newName\n        }\n        // Observe the LiveData, passing in this activity as the LifecycleOwner \t\t\tand the observer.\n        model.currentName.observe(this, nameObserver)\n    }\n}\n```\n\nViewModel会自动帮你管理生命周期，很智能：\n\n```kotlin\nclass MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        val viewModel =ViewModelProviders.of(this).get(MyViewModel::class.java)\n        viewModel.user.value = User(\"张laoshi\")\n        viewModel.user.observe(this,Observer<User>{ user ->\n            Log.d(\"LiveData\",\"设置名字${user.name}\")\n            tv.text = user.name\n        })\n        /**\n         * 假如在5s内按下home键，5s到了不会设置新的名字，如果切回当前activity，会立即设置新的名字\n         */\n        Handler().postDelayed(Runnable {\n            Log.d(\"LiveData\",\"5s到了。\")\n            viewModel.user.value = User(\"asd\")\n        },5000)\n    }\n}\nclass MyViewModel : ViewModel(){\n    val user:MutableLiveData<User> by lazy {\n        MutableLiveData<User>()\n    }\n}\ndata class User(var name:String)\n```","source":"_posts/Jetpack学习-LiveData.md","raw":"---\ntitle: 'Jetpack学习-LiveData'\ndate: 2019-06-20 09:44:45\ntags:\n---\n\n##### LiveData的基本使用\n\n1. 新建一个LiveData实例，通常在ViewModel中创建；\n2. 建立一个Observer对象，覆写onChanged()；\n3. 调用liveData.observer(LifeCycleOwner,Observer)；\n\n代码如下\n\n```xml\nimplementation 'androidx.lifecycle:lifecycle-extensions:2.0.0-beta01'\n```\n\n```kotlin\nclass NameViewModel : ViewModel() {\n    // Create a LiveData with a String\n    val currentName: MutableLiveData<String> by lazy {\n        MutableLiveData<String>()\n    }\n    // Rest of the ViewModel...\n}\n```\n\n```kotlin\nclass NameActivity : AppCompatActivity() {\n    private lateinit var model: NameViewModel\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        // Other code to setup the activity...\n        // Get the ViewModel.\n        model = ViewModelProviders.of(this).get(NameViewModel::class.java)\n        // Create the observer which updates the UI.\n        val nameObserver = Observer<String> { newName ->\n            // Update the UI, in this case, a TextView.\n            nameTextView.text = newName\n        }\n        // Observe the LiveData, passing in this activity as the LifecycleOwner \t\t\tand the observer.\n        model.currentName.observe(this, nameObserver)\n    }\n}\n```\n\nViewModel会自动帮你管理生命周期，很智能：\n\n```kotlin\nclass MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        val viewModel =ViewModelProviders.of(this).get(MyViewModel::class.java)\n        viewModel.user.value = User(\"张laoshi\")\n        viewModel.user.observe(this,Observer<User>{ user ->\n            Log.d(\"LiveData\",\"设置名字${user.name}\")\n            tv.text = user.name\n        })\n        /**\n         * 假如在5s内按下home键，5s到了不会设置新的名字，如果切回当前activity，会立即设置新的名字\n         */\n        Handler().postDelayed(Runnable {\n            Log.d(\"LiveData\",\"5s到了。\")\n            viewModel.user.value = User(\"asd\")\n        },5000)\n    }\n}\nclass MyViewModel : ViewModel(){\n    val user:MutableLiveData<User> by lazy {\n        MutableLiveData<User>()\n    }\n}\ndata class User(var name:String)\n```","slug":"Jetpack学习-LiveData","published":1,"updated":"2019-06-21T01:23:02.893Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjx5whswa000frwtkdqe77cg8","content":"<h5 id=\"LiveData的基本使用\"><a href=\"#LiveData的基本使用\" class=\"headerlink\" title=\"LiveData的基本使用\"></a>LiveData的基本使用</h5><ol>\n<li>新建一个LiveData实例，通常在ViewModel中创建；</li>\n<li>建立一个Observer对象，覆写onChanged()；</li>\n<li>调用liveData.observer(LifeCycleOwner,Observer)；</li>\n</ol>\n<p>代码如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0-beta01'</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NameViewModel</span> : <span class=\"type\">ViewModel</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Create a LiveData with a String</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> currentName: MutableLiveData&lt;String&gt; <span class=\"keyword\">by</span> lazy &#123;</span><br><span class=\"line\">        MutableLiveData&lt;String&gt;()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Rest of the ViewModel...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NameActivity</span> : <span class=\"type\">AppCompatActivity</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> model: NameViewModel</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        <span class=\"comment\">// Other code to setup the activity...</span></span><br><span class=\"line\">        <span class=\"comment\">// Get the ViewModel.</span></span><br><span class=\"line\">        model = ViewModelProviders.of(<span class=\"keyword\">this</span>).<span class=\"keyword\">get</span>(NameViewModel::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">java</span>)</span></span><br><span class=\"line\">        <span class=\"comment\">// Create the observer which updates the UI.</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> nameObserver = Observer&lt;String&gt; &#123; newName -&gt;</span><br><span class=\"line\">            <span class=\"comment\">// Update the UI, in this case, a TextView.</span></span><br><span class=\"line\">            nameTextView.text = newName</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Observe the LiveData, passing in this activity as the LifecycleOwner \t\t\tand the observer.</span></span><br><span class=\"line\">        model.currentName.observe(<span class=\"keyword\">this</span>, nameObserver)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ViewModel会自动帮你管理生命周期，很智能：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_main)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> viewModel =ViewModelProviders.of(<span class=\"keyword\">this</span>).<span class=\"keyword\">get</span>(MyViewModel::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">java</span>)</span></span><br><span class=\"line\">        viewModel.user.value = User(<span class=\"string\">\"张laoshi\"</span>)</span><br><span class=\"line\">        viewModel.user.observe(<span class=\"keyword\">this</span>,Observer&lt;User&gt;&#123; user -&gt;</span><br><span class=\"line\">            Log.d(<span class=\"string\">\"LiveData\"</span>,<span class=\"string\">\"设置名字<span class=\"subst\">$&#123;user.name&#125;</span>\"</span>)</span><br><span class=\"line\">            tv.text = user.name</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 假如在5s内按下home键，5s到了不会设置新的名字，如果切回当前activity，会立即设置新的名字</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        Handler().postDelayed(Runnable &#123;</span><br><span class=\"line\">            Log.d(<span class=\"string\">\"LiveData\"</span>,<span class=\"string\">\"5s到了。\"</span>)</span><br><span class=\"line\">            viewModel.user.value = User(<span class=\"string\">\"asd\"</span>)</span><br><span class=\"line\">        &#125;,<span class=\"number\">5000</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyViewModel</span> : <span class=\"type\">ViewModel</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> user:MutableLiveData&lt;User&gt; <span class=\"keyword\">by</span> lazy &#123;</span><br><span class=\"line\">        MutableLiveData&lt;User&gt;()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>(<span class=\"keyword\">var</span> name:String)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h5 id=\"LiveData的基本使用\"><a href=\"#LiveData的基本使用\" class=\"headerlink\" title=\"LiveData的基本使用\"></a>LiveData的基本使用</h5><ol>\n<li>新建一个LiveData实例，通常在ViewModel中创建；</li>\n<li>建立一个Observer对象，覆写onChanged()；</li>\n<li>调用liveData.observer(LifeCycleOwner,Observer)；</li>\n</ol>\n<p>代码如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0-beta01'</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NameViewModel</span> : <span class=\"type\">ViewModel</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Create a LiveData with a String</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> currentName: MutableLiveData&lt;String&gt; <span class=\"keyword\">by</span> lazy &#123;</span><br><span class=\"line\">        MutableLiveData&lt;String&gt;()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Rest of the ViewModel...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NameActivity</span> : <span class=\"type\">AppCompatActivity</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> model: NameViewModel</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        <span class=\"comment\">// Other code to setup the activity...</span></span><br><span class=\"line\">        <span class=\"comment\">// Get the ViewModel.</span></span><br><span class=\"line\">        model = ViewModelProviders.of(<span class=\"keyword\">this</span>).<span class=\"keyword\">get</span>(NameViewModel::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">java</span>)</span></span><br><span class=\"line\">        <span class=\"comment\">// Create the observer which updates the UI.</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> nameObserver = Observer&lt;String&gt; &#123; newName -&gt;</span><br><span class=\"line\">            <span class=\"comment\">// Update the UI, in this case, a TextView.</span></span><br><span class=\"line\">            nameTextView.text = newName</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Observe the LiveData, passing in this activity as the LifecycleOwner \t\t\tand the observer.</span></span><br><span class=\"line\">        model.currentName.observe(<span class=\"keyword\">this</span>, nameObserver)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ViewModel会自动帮你管理生命周期，很智能：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_main)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> viewModel =ViewModelProviders.of(<span class=\"keyword\">this</span>).<span class=\"keyword\">get</span>(MyViewModel::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">java</span>)</span></span><br><span class=\"line\">        viewModel.user.value = User(<span class=\"string\">\"张laoshi\"</span>)</span><br><span class=\"line\">        viewModel.user.observe(<span class=\"keyword\">this</span>,Observer&lt;User&gt;&#123; user -&gt;</span><br><span class=\"line\">            Log.d(<span class=\"string\">\"LiveData\"</span>,<span class=\"string\">\"设置名字<span class=\"subst\">$&#123;user.name&#125;</span>\"</span>)</span><br><span class=\"line\">            tv.text = user.name</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 假如在5s内按下home键，5s到了不会设置新的名字，如果切回当前activity，会立即设置新的名字</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        Handler().postDelayed(Runnable &#123;</span><br><span class=\"line\">            Log.d(<span class=\"string\">\"LiveData\"</span>,<span class=\"string\">\"5s到了。\"</span>)</span><br><span class=\"line\">            viewModel.user.value = User(<span class=\"string\">\"asd\"</span>)</span><br><span class=\"line\">        &#125;,<span class=\"number\">5000</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyViewModel</span> : <span class=\"type\">ViewModel</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> user:MutableLiveData&lt;User&gt; <span class=\"keyword\">by</span> lazy &#123;</span><br><span class=\"line\">        MutableLiveData&lt;User&gt;()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>(<span class=\"keyword\">var</span> name:String)</span><br></pre></td></tr></table></figure>"},{"title":"Jetpack学习-DataBinding","date":"2019-06-04T03:52:23.000Z","_content":"\n##### BindingMethods\n\n```kotlin\n@BindingMethods(value = [\n    BindingMethod(\n        type = android.widget.ImageView::class,\n        attribute = \"android:tint\",\n        method = \"setImageTintList\")])\n```\n\n将ImageView的已有属性 android:tint（可以改变图片颜色，不用每个状态都p一张图片） 与 [setImageTintList(ColorStateList)](https://developer.android.google.cn/reference/android/widget/ImageView.html#setImageTintList(android.content.res.ColorStateList)) 关联起来，而不是和setTint()（这个方法不存在）关联起来。BindingMethods的作用就是将 **存在的属性** 和 **存在但是不对应的方法** 关联起来。\n\n##### BindingAdapter\n\n```kotlin\n@BindingAdapter(\"android:paddingLeft\")\nfun setPaddingLeft(view: View, padding: Int) {\n    view.setPadding(padding,\n                view.getPaddingTop(),\n                view.getPaddingRight(),\n                view.getPaddingBottom())\n}\n```\n\nView中的属性 android:paddingLeft 在代码中没有与之对应的（View中没有setPaddingLeft()），但是View中有setPadding(left,top,right,bottom)。BindingAdapter的作用就是将 **已存在的属性** 和 **自定义的方法** 关联起来。\n\nBindingAdapter可以包含多个属性,下面是演示Picasso加载网络图片的方法：\n\n```\n@BindingAdapter(\"imageUrl\", \"error\")\nfun loadImage(view: ImageView, url: String, error: Drawable) {\n    Picasso.get().load(url).error(error).into(view)\n}\n```\n\n布局中这样写\n\n```xml\n<ImageView\n\tapp:imageUrl=\"@{venue.imageUrl}\"\n\tapp:error=\"@{@drawable/venueError}\"/>\n```\n\n上面的BindingAdapter有2个参数，如果你想其中任何一个参数改变都会触发方法，你可以这样写：\n\n```kotlin\n@BindingAdapter(value = [\"imageUrl\", \"error\"]，requireAll = false)\nfun loadImage(view: ImageView, url: String, error: Drawable) {\n    Picasso.get().load(url).error(error).into(view)\n}\n```\n\n使用@get:Bindable无法生成BR文件的解决办法\n\n```\napply plugin: 'kotlin-kapt'\n```\n\nBindingAdapter有个很重要的作用，举例说明：\n\n```kotlin\ndata class User(val name:String)\n```\n\n```xml\n<TextView\n\tandroid:text=\"@{user.name}\"/>\n```\n\n```\nval user = User(\"xiaoli\")\n```\n\n正常来说binding框架会调用TextView.setText()方法，来显示结果即：xiaoli，但是我希望显示是大写的，那么可以这么写：\n\n```kotlin\n@BindingAdapter(\"android:text\")\nfun setText(TextView view, CharSequence text) {\n    val newText = text.toString().toUpercase()\n    view.text = newText;\n}\n```\n\n总结来说\n\n当在任意一个View的任意一个属性上使用binding表达式时，DataBinding框架的处理过程分成三步：\n 1、对binding表达式求值\n 2、寻找合适的BindingAdapter，如果找到，就调用它的方法\n 3、如果没有找到合适的BindingAdapter，就在View上寻找合适的方法调用","source":"_posts/Jetpack学习-DataBinding.md","raw":"---\ntitle: Jetpack学习-DataBinding\ndate: 2019-06-04 11:52:23\ntags:\n---\n\n##### BindingMethods\n\n```kotlin\n@BindingMethods(value = [\n    BindingMethod(\n        type = android.widget.ImageView::class,\n        attribute = \"android:tint\",\n        method = \"setImageTintList\")])\n```\n\n将ImageView的已有属性 android:tint（可以改变图片颜色，不用每个状态都p一张图片） 与 [setImageTintList(ColorStateList)](https://developer.android.google.cn/reference/android/widget/ImageView.html#setImageTintList(android.content.res.ColorStateList)) 关联起来，而不是和setTint()（这个方法不存在）关联起来。BindingMethods的作用就是将 **存在的属性** 和 **存在但是不对应的方法** 关联起来。\n\n##### BindingAdapter\n\n```kotlin\n@BindingAdapter(\"android:paddingLeft\")\nfun setPaddingLeft(view: View, padding: Int) {\n    view.setPadding(padding,\n                view.getPaddingTop(),\n                view.getPaddingRight(),\n                view.getPaddingBottom())\n}\n```\n\nView中的属性 android:paddingLeft 在代码中没有与之对应的（View中没有setPaddingLeft()），但是View中有setPadding(left,top,right,bottom)。BindingAdapter的作用就是将 **已存在的属性** 和 **自定义的方法** 关联起来。\n\nBindingAdapter可以包含多个属性,下面是演示Picasso加载网络图片的方法：\n\n```\n@BindingAdapter(\"imageUrl\", \"error\")\nfun loadImage(view: ImageView, url: String, error: Drawable) {\n    Picasso.get().load(url).error(error).into(view)\n}\n```\n\n布局中这样写\n\n```xml\n<ImageView\n\tapp:imageUrl=\"@{venue.imageUrl}\"\n\tapp:error=\"@{@drawable/venueError}\"/>\n```\n\n上面的BindingAdapter有2个参数，如果你想其中任何一个参数改变都会触发方法，你可以这样写：\n\n```kotlin\n@BindingAdapter(value = [\"imageUrl\", \"error\"]，requireAll = false)\nfun loadImage(view: ImageView, url: String, error: Drawable) {\n    Picasso.get().load(url).error(error).into(view)\n}\n```\n\n使用@get:Bindable无法生成BR文件的解决办法\n\n```\napply plugin: 'kotlin-kapt'\n```\n\nBindingAdapter有个很重要的作用，举例说明：\n\n```kotlin\ndata class User(val name:String)\n```\n\n```xml\n<TextView\n\tandroid:text=\"@{user.name}\"/>\n```\n\n```\nval user = User(\"xiaoli\")\n```\n\n正常来说binding框架会调用TextView.setText()方法，来显示结果即：xiaoli，但是我希望显示是大写的，那么可以这么写：\n\n```kotlin\n@BindingAdapter(\"android:text\")\nfun setText(TextView view, CharSequence text) {\n    val newText = text.toString().toUpercase()\n    view.text = newText;\n}\n```\n\n总结来说\n\n当在任意一个View的任意一个属性上使用binding表达式时，DataBinding框架的处理过程分成三步：\n 1、对binding表达式求值\n 2、寻找合适的BindingAdapter，如果找到，就调用它的方法\n 3、如果没有找到合适的BindingAdapter，就在View上寻找合适的方法调用","slug":"Jetpack学习-DataBinding","published":1,"updated":"2019-06-19T08:14:00.439Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjx5whswd000jrwtk9ebrqt7z","content":"<h5 id=\"BindingMethods\"><a href=\"#BindingMethods\" class=\"headerlink\" title=\"BindingMethods\"></a>BindingMethods</h5><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@BindingMethods(value = [</span></span><br><span class=\"line\"><span class=\"meta\">    BindingMethod(</span></span><br><span class=\"line\"><span class=\"meta\">        type = android.widget.ImageView::class,</span></span><br><span class=\"line\"><span class=\"meta\">        attribute = <span class=\"meta-string\">\"android:tint\"</span>,</span></span><br><span class=\"line\"><span class=\"meta\">        method = <span class=\"meta-string\">\"setImageTintList\"</span>)</span>])</span><br></pre></td></tr></table></figure>\n<p>将ImageView的已有属性 android:tint（可以改变图片颜色，不用每个状态都p一张图片） 与 <a href=\"https://developer.android.google.cn/reference/android/widget/ImageView.html#setImageTintList(android.content.res.ColorStateList\" target=\"_blank\" rel=\"noopener\">setImageTintList(ColorStateList)</a>) 关联起来，而不是和setTint()（这个方法不存在）关联起来。BindingMethods的作用就是将 <strong>存在的属性</strong> 和 <strong>存在但是不对应的方法</strong> 关联起来。</p>\n<h5 id=\"BindingAdapter\"><a href=\"#BindingAdapter\" class=\"headerlink\" title=\"BindingAdapter\"></a>BindingAdapter</h5><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@BindingAdapter(<span class=\"meta-string\">\"android:paddingLeft\"</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">setPaddingLeft</span><span class=\"params\">(view: <span class=\"type\">View</span>, padding: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\">    view.setPadding(padding,</span><br><span class=\"line\">                view.getPaddingTop(),</span><br><span class=\"line\">                view.getPaddingRight(),</span><br><span class=\"line\">                view.getPaddingBottom())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>View中的属性 android:paddingLeft 在代码中没有与之对应的（View中没有setPaddingLeft()），但是View中有setPadding(left,top,right,bottom)。BindingAdapter的作用就是将 <strong>已存在的属性</strong> 和 <strong>自定义的方法</strong> 关联起来。</p>\n<p>BindingAdapter可以包含多个属性,下面是演示Picasso加载网络图片的方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@BindingAdapter(&quot;imageUrl&quot;, &quot;error&quot;)</span><br><span class=\"line\">fun loadImage(view: ImageView, url: String, error: Drawable) &#123;</span><br><span class=\"line\">    Picasso.get().load(url).error(error).into(view)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>布局中这样写</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">app:imageUrl</span>=<span class=\"string\">\"@&#123;venue.imageUrl&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">app:error</span>=<span class=\"string\">\"@&#123;@drawable/venueError&#125;\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面的BindingAdapter有2个参数，如果你想其中任何一个参数改变都会触发方法，你可以这样写：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@BindingAdapter(value = [<span class=\"meta-string\">\"imageUrl\"</span>, <span class=\"meta-string\">\"error\"</span>]，requireAll = false)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">loadImage</span><span class=\"params\">(view: <span class=\"type\">ImageView</span>, url: <span class=\"type\">String</span>, error: <span class=\"type\">Drawable</span>)</span></span> &#123;</span><br><span class=\"line\">    Picasso.<span class=\"keyword\">get</span>().load(url).error(error).into(view)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用@get:Bindable无法生成BR文件的解决办法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: &apos;kotlin-kapt&apos;</span><br></pre></td></tr></table></figure>\n<p>BindingAdapter有个很重要的作用，举例说明：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>(<span class=\"keyword\">val</span> name:String)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;user.name&#125;\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val user = User(&quot;xiaoli&quot;)</span><br></pre></td></tr></table></figure>\n<p>正常来说binding框架会调用TextView.setText()方法，来显示结果即：xiaoli，但是我希望显示是大写的，那么可以这么写：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@BindingAdapter(<span class=\"meta-string\">\"android:text\"</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">setText</span><span class=\"params\">(TextView view, CharSequence text)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> newText = text.toString().toUpercase()</span><br><span class=\"line\">    view.text = newText;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>总结来说</p>\n<p>当在任意一个View的任意一个属性上使用binding表达式时，DataBinding框架的处理过程分成三步：<br> 1、对binding表达式求值<br> 2、寻找合适的BindingAdapter，如果找到，就调用它的方法<br> 3、如果没有找到合适的BindingAdapter，就在View上寻找合适的方法调用</p>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"BindingMethods\"><a href=\"#BindingMethods\" class=\"headerlink\" title=\"BindingMethods\"></a>BindingMethods</h5><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@BindingMethods(value = [</span></span><br><span class=\"line\"><span class=\"meta\">    BindingMethod(</span></span><br><span class=\"line\"><span class=\"meta\">        type = android.widget.ImageView::class,</span></span><br><span class=\"line\"><span class=\"meta\">        attribute = <span class=\"meta-string\">\"android:tint\"</span>,</span></span><br><span class=\"line\"><span class=\"meta\">        method = <span class=\"meta-string\">\"setImageTintList\"</span>)</span>])</span><br></pre></td></tr></table></figure>\n<p>将ImageView的已有属性 android:tint（可以改变图片颜色，不用每个状态都p一张图片） 与 <a href=\"https://developer.android.google.cn/reference/android/widget/ImageView.html#setImageTintList(android.content.res.ColorStateList\" target=\"_blank\" rel=\"noopener\">setImageTintList(ColorStateList)</a>) 关联起来，而不是和setTint()（这个方法不存在）关联起来。BindingMethods的作用就是将 <strong>存在的属性</strong> 和 <strong>存在但是不对应的方法</strong> 关联起来。</p>\n<h5 id=\"BindingAdapter\"><a href=\"#BindingAdapter\" class=\"headerlink\" title=\"BindingAdapter\"></a>BindingAdapter</h5><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@BindingAdapter(<span class=\"meta-string\">\"android:paddingLeft\"</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">setPaddingLeft</span><span class=\"params\">(view: <span class=\"type\">View</span>, padding: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\">    view.setPadding(padding,</span><br><span class=\"line\">                view.getPaddingTop(),</span><br><span class=\"line\">                view.getPaddingRight(),</span><br><span class=\"line\">                view.getPaddingBottom())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>View中的属性 android:paddingLeft 在代码中没有与之对应的（View中没有setPaddingLeft()），但是View中有setPadding(left,top,right,bottom)。BindingAdapter的作用就是将 <strong>已存在的属性</strong> 和 <strong>自定义的方法</strong> 关联起来。</p>\n<p>BindingAdapter可以包含多个属性,下面是演示Picasso加载网络图片的方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@BindingAdapter(&quot;imageUrl&quot;, &quot;error&quot;)</span><br><span class=\"line\">fun loadImage(view: ImageView, url: String, error: Drawable) &#123;</span><br><span class=\"line\">    Picasso.get().load(url).error(error).into(view)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>布局中这样写</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">app:imageUrl</span>=<span class=\"string\">\"@&#123;venue.imageUrl&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">app:error</span>=<span class=\"string\">\"@&#123;@drawable/venueError&#125;\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面的BindingAdapter有2个参数，如果你想其中任何一个参数改变都会触发方法，你可以这样写：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@BindingAdapter(value = [<span class=\"meta-string\">\"imageUrl\"</span>, <span class=\"meta-string\">\"error\"</span>]，requireAll = false)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">loadImage</span><span class=\"params\">(view: <span class=\"type\">ImageView</span>, url: <span class=\"type\">String</span>, error: <span class=\"type\">Drawable</span>)</span></span> &#123;</span><br><span class=\"line\">    Picasso.<span class=\"keyword\">get</span>().load(url).error(error).into(view)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用@get:Bindable无法生成BR文件的解决办法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: &apos;kotlin-kapt&apos;</span><br></pre></td></tr></table></figure>\n<p>BindingAdapter有个很重要的作用，举例说明：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>(<span class=\"keyword\">val</span> name:String)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;user.name&#125;\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val user = User(&quot;xiaoli&quot;)</span><br></pre></td></tr></table></figure>\n<p>正常来说binding框架会调用TextView.setText()方法，来显示结果即：xiaoli，但是我希望显示是大写的，那么可以这么写：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@BindingAdapter(<span class=\"meta-string\">\"android:text\"</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">setText</span><span class=\"params\">(TextView view, CharSequence text)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> newText = text.toString().toUpercase()</span><br><span class=\"line\">    view.text = newText;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>总结来说</p>\n<p>当在任意一个View的任意一个属性上使用binding表达式时，DataBinding框架的处理过程分成三步：<br> 1、对binding表达式求值<br> 2、寻找合适的BindingAdapter，如果找到，就调用它的方法<br> 3、如果没有找到合适的BindingAdapter，就在View上寻找合适的方法调用</p>\n"},{"title":"Jetpack学习-Lifecycles","date":"2019-06-03T02:35:53.000Z","_content":"\n##### Lifecycle为何出现？\n\n1. 在Activity生命周期方法中例如onCreate()、onStart()、onStop()中有大量的代码，例如一个获取用户位置的组件需要在onCreate()中初始化实例，在onStart()中开始获取用户位置，在onStop()中停止获取用户位置。这只是一个组件，在实际开发当中，业务是复杂的，组件也是很多的，维护这么多组件，会耗费很多精力。\n\n2. 是我们无法预测组件能在onStop()之前开始。例如一个定位组件需要在onStart()中检查配置（耗时操作），然后回调结果，开始获取位置。但是用户按下了home键，此时app进入后台，onStart()收到回调，那么在回调中做一些操作就会很危险（[官方翻译](https://developer.android.google.cn/topic/libraries/architecture/lifecycle) 是组件保持活动的时间超过其所需的时间，大概意思是本应该在onStop()中销毁的一些对象，重新在onStart收到回调后复活了）。\n\n##### 如何处理on stop events?\n\nEvent.ON_STOP 并不是随着Activity生命周期onStop()调用的，而是伴随着Activity生命周期中的onSaveInstanceState()，onStop()是在onSaveInstanceState()后面调用的。\n\n在 官方文档 中有这样一个小问题，为了使流程更简单，并与旧版本提供更好的兼容性，从版本1.0.0 RC1开始，Lifecycle对象被标记为CREATED，当onSaveInstanceState()被调用时， ON_STOP事件被分发，而不需等待调用onStop()方法。**这不太可能影响您的代码**，但这里你需要注意，因为它与API级别26和更低的Activity类中的调用顺序不匹配。所以这里不做详细的研究（之前一直对这里耿耿于怀）。\n\n下面是[demo]( https://github.com/zhizhulp/JetPackDemo.git) (Android8.0)中的log：\n\n\n```\n//进入MainActivity\n2019-06-03 18:29:51.455 9831-9831/com.example.jetpackdemo D/MainActivity_LocationM: onCreate\n2019-06-03 18:29:51.487 9831-9831/com.example.jetpackdemo D/LocationM: create-CREATED\n2019-06-03 18:29:51.488 9831-9831/com.example.jetpackdemo D/MainActivity_LocationM: onStart\n2019-06-03 18:29:51.489 9831-9831/com.example.jetpackdemo D/LocationM: start-STARTED\n2019-06-03 18:29:51.493 9831-9831/com.example.jetpackdemo D/MainActivity_LocationM: onResume\n2019-06-03 18:29:51.494 9831-9831/com.example.jetpackdemo D/LocationM: resume-RESUMED\n//按home键/进入其他页面/按电源键/横竖屏切换（即app短暂进入后台）\n2019-06-03 18:29:56.099 9831-9831/com.example.jetpackdemo D/LocationM: pause-STARTED\n2019-06-03 18:29:56.100 9831-9831/com.example.jetpackdemo D/MainActivity_LocationM: onPause\n2019-06-03 18:29:56.522 9831-9831/com.example.jetpackdemo D/MainActivity_LocationM: onSaveInstanceState\n2019-06-03 18:29:56.523 9831-9831/com.example.jetpackdemo D/LocationM: stop-CREATED\n2019-06-03 18:29:56.524 9831-9831/com.example.jetpackdemo D/MainActivity_LocationM: onStop\n//重新进入MainActivity\n2019-06-03 18:30:07.496 9831-9831/com.example.jetpackdemo D/MainActivity_LocationM: onStart\n2019-06-03 18:30:07.497 9831-9831/com.example.jetpackdemo D/LocationM: start-STARTED\n2019-06-03 18:30:07.497 9831-9831/com.example.jetpackdemo D/MainActivity_LocationM: onResume\n2019-06-03 18:30:07.500 9831-9831/com.example.jetpackdemo D/LocationM: resume-RESUMED\n//MainActivity销毁\n2019-06-04 09:42:24.156 13677-13677/com.example.jetpackdemo D/LocationM: pause-STARTED\n2019-06-04 09:42:24.158 13677-13677/com.example.jetpackdemo D/MainActivity_LocationM: onPause\n2019-06-04 09:42:24.638 13677-13677/com.example.jetpackdemo D/LocationM: stop-CREATED\n2019-06-04 09:42:24.638 13677-13677/com.example.jetpackdemo D/MainActivity_LocationM: onStop\n2019-06-04 09:42:24.646 13677-13677/com.example.jetpackdemo D/LocationM: destroy-DESTROYED\n2019-06-04 09:42:24.647 13677-13677/com.example.jetpackdemo D/MainActivity_LocationM: onDestroy\n```\n\n##### 如何理解State?\n\n官方的图解如下:\n\n![/source/images](\\images\\lifecycle-states.png)\n\n为什么State只有5个？分别为INITIALIZED、DESTROYED、CREATED、STARTED、RESUMED，这里我参考了 [这个博客](https://blog.csdn.net/u012124438/article/details/88719321) （非常感谢），其实这5个状态并不像字面上的意思。\n\n1. 生命周期状态为RESUMED时表示，当前activity 是在前台，并且可交互也就onResume()执行后。\n2. 生命周期状态为STARTED时，表示当前activity处于可见但是不可交互，也就是onStart()方法刚执行完或者onPause()方法刚执行完的状态。\n3. 生命周期状态为CREATED，表示onCreate()方法刚刚执行完或者onStop()方法刚刚执行完，也就是当前activity不在前台，但是也没有处于销毁状态。\n4. 生命周期状态为DESTORYED,表示当前Activity还不存在，没有被创建或者已经销毁，我们通常考虑比较多的就是，onDestory()方法执行后，当前Activity已经销毁。\n5. 生命周期状态为INITIALIZED，表示初始状态。\n\n所以，如果我们要保证在Activity/Fragment的有效生命周期内进行的操作，必须判断，当前lifecycle的状态是否至少是CREATED状态，避免Activity或者fragment销毁了以后，回调或者网络请求才回来，此时做一些操作会导致异常。代码如下\n\n```\nif (lifecycle.currentState.isAtLeast(Lifecycle.State.STARTED)) {\n\t// do something 保证数据回调回来，当前activity是存在的，也就是State必须为STARTED、RESUMED，Activity此时的状态应该为onStart、onResume、onPause。\n }\n```\n\n##### Activity如何实现Lifecycle\n\nAppcompatActivity默认实现了LifecycleOwner，但是在开发当中一些第三方库使用了Activity，有时候我们也需要实现Lifecycle的功能。代码如下：\n\n```kotlin\npackage com.example.jetpackdemo\n\nimport android.app.Activity\nimport android.os.Bundle\nimport androidx.lifecycle.Lifecycle\nimport androidx.lifecycle.LifecycleOwner\nimport androidx.lifecycle.LifecycleRegistry\n\nopen class LifeOwnerActivity: Activity(),LifecycleOwner {\n    private val register:LifecycleRegistry = LifecycleRegistry(this)\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        register.currentState = Lifecycle.State.CREATED\n    }\n\n    override fun getLifecycle(): Lifecycle {\n        return register\n    }\n\n    override fun onStart() {\n        super.onStart()\n        register.currentState = Lifecycle.State.STARTED\n    }\n\n    override fun onResume() {\n        super.onResume()\n        register.currentState = Lifecycle.State.RESUMED\n    }\n\n    override fun onPause() {\n        super.onPause()\n        register.currentState = Lifecycle.State.STARTED\n    }\n\n    override fun onSaveInstanceState(outState: Bundle?) {\n        super.onSaveInstanceState(outState)\n        register.currentState = Lifecycle.State.CREATED\n    }\n\n    override fun onStop() {\n        super.onStop()\n        register.currentState = Lifecycle.State.CREATED\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        register.currentState = Lifecycle.State.DESTROYED\n    }\n    \n}\n```\n\n\n\n本篇博客历时1.5天。","source":"_posts/Jetpack学习-Lifecycles.md","raw":"---\ntitle: Jetpack学习-Lifecycles\ndate: 2019-06-03 10:35:53\ntags: [Android,Jetpack]\ncategories: Jetpack\n---\n\n##### Lifecycle为何出现？\n\n1. 在Activity生命周期方法中例如onCreate()、onStart()、onStop()中有大量的代码，例如一个获取用户位置的组件需要在onCreate()中初始化实例，在onStart()中开始获取用户位置，在onStop()中停止获取用户位置。这只是一个组件，在实际开发当中，业务是复杂的，组件也是很多的，维护这么多组件，会耗费很多精力。\n\n2. 是我们无法预测组件能在onStop()之前开始。例如一个定位组件需要在onStart()中检查配置（耗时操作），然后回调结果，开始获取位置。但是用户按下了home键，此时app进入后台，onStart()收到回调，那么在回调中做一些操作就会很危险（[官方翻译](https://developer.android.google.cn/topic/libraries/architecture/lifecycle) 是组件保持活动的时间超过其所需的时间，大概意思是本应该在onStop()中销毁的一些对象，重新在onStart收到回调后复活了）。\n\n##### 如何处理on stop events?\n\nEvent.ON_STOP 并不是随着Activity生命周期onStop()调用的，而是伴随着Activity生命周期中的onSaveInstanceState()，onStop()是在onSaveInstanceState()后面调用的。\n\n在 官方文档 中有这样一个小问题，为了使流程更简单，并与旧版本提供更好的兼容性，从版本1.0.0 RC1开始，Lifecycle对象被标记为CREATED，当onSaveInstanceState()被调用时， ON_STOP事件被分发，而不需等待调用onStop()方法。**这不太可能影响您的代码**，但这里你需要注意，因为它与API级别26和更低的Activity类中的调用顺序不匹配。所以这里不做详细的研究（之前一直对这里耿耿于怀）。\n\n下面是[demo]( https://github.com/zhizhulp/JetPackDemo.git) (Android8.0)中的log：\n\n\n```\n//进入MainActivity\n2019-06-03 18:29:51.455 9831-9831/com.example.jetpackdemo D/MainActivity_LocationM: onCreate\n2019-06-03 18:29:51.487 9831-9831/com.example.jetpackdemo D/LocationM: create-CREATED\n2019-06-03 18:29:51.488 9831-9831/com.example.jetpackdemo D/MainActivity_LocationM: onStart\n2019-06-03 18:29:51.489 9831-9831/com.example.jetpackdemo D/LocationM: start-STARTED\n2019-06-03 18:29:51.493 9831-9831/com.example.jetpackdemo D/MainActivity_LocationM: onResume\n2019-06-03 18:29:51.494 9831-9831/com.example.jetpackdemo D/LocationM: resume-RESUMED\n//按home键/进入其他页面/按电源键/横竖屏切换（即app短暂进入后台）\n2019-06-03 18:29:56.099 9831-9831/com.example.jetpackdemo D/LocationM: pause-STARTED\n2019-06-03 18:29:56.100 9831-9831/com.example.jetpackdemo D/MainActivity_LocationM: onPause\n2019-06-03 18:29:56.522 9831-9831/com.example.jetpackdemo D/MainActivity_LocationM: onSaveInstanceState\n2019-06-03 18:29:56.523 9831-9831/com.example.jetpackdemo D/LocationM: stop-CREATED\n2019-06-03 18:29:56.524 9831-9831/com.example.jetpackdemo D/MainActivity_LocationM: onStop\n//重新进入MainActivity\n2019-06-03 18:30:07.496 9831-9831/com.example.jetpackdemo D/MainActivity_LocationM: onStart\n2019-06-03 18:30:07.497 9831-9831/com.example.jetpackdemo D/LocationM: start-STARTED\n2019-06-03 18:30:07.497 9831-9831/com.example.jetpackdemo D/MainActivity_LocationM: onResume\n2019-06-03 18:30:07.500 9831-9831/com.example.jetpackdemo D/LocationM: resume-RESUMED\n//MainActivity销毁\n2019-06-04 09:42:24.156 13677-13677/com.example.jetpackdemo D/LocationM: pause-STARTED\n2019-06-04 09:42:24.158 13677-13677/com.example.jetpackdemo D/MainActivity_LocationM: onPause\n2019-06-04 09:42:24.638 13677-13677/com.example.jetpackdemo D/LocationM: stop-CREATED\n2019-06-04 09:42:24.638 13677-13677/com.example.jetpackdemo D/MainActivity_LocationM: onStop\n2019-06-04 09:42:24.646 13677-13677/com.example.jetpackdemo D/LocationM: destroy-DESTROYED\n2019-06-04 09:42:24.647 13677-13677/com.example.jetpackdemo D/MainActivity_LocationM: onDestroy\n```\n\n##### 如何理解State?\n\n官方的图解如下:\n\n![/source/images](\\images\\lifecycle-states.png)\n\n为什么State只有5个？分别为INITIALIZED、DESTROYED、CREATED、STARTED、RESUMED，这里我参考了 [这个博客](https://blog.csdn.net/u012124438/article/details/88719321) （非常感谢），其实这5个状态并不像字面上的意思。\n\n1. 生命周期状态为RESUMED时表示，当前activity 是在前台，并且可交互也就onResume()执行后。\n2. 生命周期状态为STARTED时，表示当前activity处于可见但是不可交互，也就是onStart()方法刚执行完或者onPause()方法刚执行完的状态。\n3. 生命周期状态为CREATED，表示onCreate()方法刚刚执行完或者onStop()方法刚刚执行完，也就是当前activity不在前台，但是也没有处于销毁状态。\n4. 生命周期状态为DESTORYED,表示当前Activity还不存在，没有被创建或者已经销毁，我们通常考虑比较多的就是，onDestory()方法执行后，当前Activity已经销毁。\n5. 生命周期状态为INITIALIZED，表示初始状态。\n\n所以，如果我们要保证在Activity/Fragment的有效生命周期内进行的操作，必须判断，当前lifecycle的状态是否至少是CREATED状态，避免Activity或者fragment销毁了以后，回调或者网络请求才回来，此时做一些操作会导致异常。代码如下\n\n```\nif (lifecycle.currentState.isAtLeast(Lifecycle.State.STARTED)) {\n\t// do something 保证数据回调回来，当前activity是存在的，也就是State必须为STARTED、RESUMED，Activity此时的状态应该为onStart、onResume、onPause。\n }\n```\n\n##### Activity如何实现Lifecycle\n\nAppcompatActivity默认实现了LifecycleOwner，但是在开发当中一些第三方库使用了Activity，有时候我们也需要实现Lifecycle的功能。代码如下：\n\n```kotlin\npackage com.example.jetpackdemo\n\nimport android.app.Activity\nimport android.os.Bundle\nimport androidx.lifecycle.Lifecycle\nimport androidx.lifecycle.LifecycleOwner\nimport androidx.lifecycle.LifecycleRegistry\n\nopen class LifeOwnerActivity: Activity(),LifecycleOwner {\n    private val register:LifecycleRegistry = LifecycleRegistry(this)\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        register.currentState = Lifecycle.State.CREATED\n    }\n\n    override fun getLifecycle(): Lifecycle {\n        return register\n    }\n\n    override fun onStart() {\n        super.onStart()\n        register.currentState = Lifecycle.State.STARTED\n    }\n\n    override fun onResume() {\n        super.onResume()\n        register.currentState = Lifecycle.State.RESUMED\n    }\n\n    override fun onPause() {\n        super.onPause()\n        register.currentState = Lifecycle.State.STARTED\n    }\n\n    override fun onSaveInstanceState(outState: Bundle?) {\n        super.onSaveInstanceState(outState)\n        register.currentState = Lifecycle.State.CREATED\n    }\n\n    override fun onStop() {\n        super.onStop()\n        register.currentState = Lifecycle.State.CREATED\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        register.currentState = Lifecycle.State.DESTROYED\n    }\n    \n}\n```\n\n\n\n本篇博客历时1.5天。","slug":"Jetpack学习-Lifecycles","published":1,"updated":"2019-06-06T05:51:32.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjx5whswe000krwtkynvkts0f","content":"<h5 id=\"Lifecycle为何出现？\"><a href=\"#Lifecycle为何出现？\" class=\"headerlink\" title=\"Lifecycle为何出现？\"></a>Lifecycle为何出现？</h5><ol>\n<li><p>在Activity生命周期方法中例如onCreate()、onStart()、onStop()中有大量的代码，例如一个获取用户位置的组件需要在onCreate()中初始化实例，在onStart()中开始获取用户位置，在onStop()中停止获取用户位置。这只是一个组件，在实际开发当中，业务是复杂的，组件也是很多的，维护这么多组件，会耗费很多精力。</p>\n</li>\n<li><p>是我们无法预测组件能在onStop()之前开始。例如一个定位组件需要在onStart()中检查配置（耗时操作），然后回调结果，开始获取位置。但是用户按下了home键，此时app进入后台，onStart()收到回调，那么在回调中做一些操作就会很危险（<a href=\"https://developer.android.google.cn/topic/libraries/architecture/lifecycle\" target=\"_blank\" rel=\"noopener\">官方翻译</a> 是组件保持活动的时间超过其所需的时间，大概意思是本应该在onStop()中销毁的一些对象，重新在onStart收到回调后复活了）。</p>\n</li>\n</ol>\n<h5 id=\"如何处理on-stop-events\"><a href=\"#如何处理on-stop-events\" class=\"headerlink\" title=\"如何处理on stop events?\"></a>如何处理on stop events?</h5><p>Event.ON_STOP 并不是随着Activity生命周期onStop()调用的，而是伴随着Activity生命周期中的onSaveInstanceState()，onStop()是在onSaveInstanceState()后面调用的。</p>\n<p>在 官方文档 中有这样一个小问题，为了使流程更简单，并与旧版本提供更好的兼容性，从版本1.0.0 RC1开始，Lifecycle对象被标记为CREATED，当onSaveInstanceState()被调用时， ON_STOP事件被分发，而不需等待调用onStop()方法。<strong>这不太可能影响您的代码</strong>，但这里你需要注意，因为它与API级别26和更低的Activity类中的调用顺序不匹配。所以这里不做详细的研究（之前一直对这里耿耿于怀）。</p>\n<p>下面是<a href=\"https://github.com/zhizhulp/JetPackDemo.git\" target=\"_blank\" rel=\"noopener\">demo</a> (Android8.0)中的log：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//进入MainActivity</span><br><span class=\"line\">2019-06-03 18:29:51.455 9831-9831/com.example.jetpackdemo D/MainActivity_LocationM: onCreate</span><br><span class=\"line\">2019-06-03 18:29:51.487 9831-9831/com.example.jetpackdemo D/LocationM: create-CREATED</span><br><span class=\"line\">2019-06-03 18:29:51.488 9831-9831/com.example.jetpackdemo D/MainActivity_LocationM: onStart</span><br><span class=\"line\">2019-06-03 18:29:51.489 9831-9831/com.example.jetpackdemo D/LocationM: start-STARTED</span><br><span class=\"line\">2019-06-03 18:29:51.493 9831-9831/com.example.jetpackdemo D/MainActivity_LocationM: onResume</span><br><span class=\"line\">2019-06-03 18:29:51.494 9831-9831/com.example.jetpackdemo D/LocationM: resume-RESUMED</span><br><span class=\"line\">//按home键/进入其他页面/按电源键/横竖屏切换（即app短暂进入后台）</span><br><span class=\"line\">2019-06-03 18:29:56.099 9831-9831/com.example.jetpackdemo D/LocationM: pause-STARTED</span><br><span class=\"line\">2019-06-03 18:29:56.100 9831-9831/com.example.jetpackdemo D/MainActivity_LocationM: onPause</span><br><span class=\"line\">2019-06-03 18:29:56.522 9831-9831/com.example.jetpackdemo D/MainActivity_LocationM: onSaveInstanceState</span><br><span class=\"line\">2019-06-03 18:29:56.523 9831-9831/com.example.jetpackdemo D/LocationM: stop-CREATED</span><br><span class=\"line\">2019-06-03 18:29:56.524 9831-9831/com.example.jetpackdemo D/MainActivity_LocationM: onStop</span><br><span class=\"line\">//重新进入MainActivity</span><br><span class=\"line\">2019-06-03 18:30:07.496 9831-9831/com.example.jetpackdemo D/MainActivity_LocationM: onStart</span><br><span class=\"line\">2019-06-03 18:30:07.497 9831-9831/com.example.jetpackdemo D/LocationM: start-STARTED</span><br><span class=\"line\">2019-06-03 18:30:07.497 9831-9831/com.example.jetpackdemo D/MainActivity_LocationM: onResume</span><br><span class=\"line\">2019-06-03 18:30:07.500 9831-9831/com.example.jetpackdemo D/LocationM: resume-RESUMED</span><br><span class=\"line\">//MainActivity销毁</span><br><span class=\"line\">2019-06-04 09:42:24.156 13677-13677/com.example.jetpackdemo D/LocationM: pause-STARTED</span><br><span class=\"line\">2019-06-04 09:42:24.158 13677-13677/com.example.jetpackdemo D/MainActivity_LocationM: onPause</span><br><span class=\"line\">2019-06-04 09:42:24.638 13677-13677/com.example.jetpackdemo D/LocationM: stop-CREATED</span><br><span class=\"line\">2019-06-04 09:42:24.638 13677-13677/com.example.jetpackdemo D/MainActivity_LocationM: onStop</span><br><span class=\"line\">2019-06-04 09:42:24.646 13677-13677/com.example.jetpackdemo D/LocationM: destroy-DESTROYED</span><br><span class=\"line\">2019-06-04 09:42:24.647 13677-13677/com.example.jetpackdemo D/MainActivity_LocationM: onDestroy</span><br></pre></td></tr></table></figure>\n<h5 id=\"如何理解State\"><a href=\"#如何理解State\" class=\"headerlink\" title=\"如何理解State?\"></a>如何理解State?</h5><p>官方的图解如下:</p>\n<p><img src=\"\\images\\lifecycle-states.png\" alt=\"/source/images\"></p>\n<p>为什么State只有5个？分别为INITIALIZED、DESTROYED、CREATED、STARTED、RESUMED，这里我参考了 <a href=\"https://blog.csdn.net/u012124438/article/details/88719321\" target=\"_blank\" rel=\"noopener\">这个博客</a> （非常感谢），其实这5个状态并不像字面上的意思。</p>\n<ol>\n<li>生命周期状态为RESUMED时表示，当前activity 是在前台，并且可交互也就onResume()执行后。</li>\n<li>生命周期状态为STARTED时，表示当前activity处于可见但是不可交互，也就是onStart()方法刚执行完或者onPause()方法刚执行完的状态。</li>\n<li>生命周期状态为CREATED，表示onCreate()方法刚刚执行完或者onStop()方法刚刚执行完，也就是当前activity不在前台，但是也没有处于销毁状态。</li>\n<li>生命周期状态为DESTORYED,表示当前Activity还不存在，没有被创建或者已经销毁，我们通常考虑比较多的就是，onDestory()方法执行后，当前Activity已经销毁。</li>\n<li>生命周期状态为INITIALIZED，表示初始状态。</li>\n</ol>\n<p>所以，如果我们要保证在Activity/Fragment的有效生命周期内进行的操作，必须判断，当前lifecycle的状态是否至少是CREATED状态，避免Activity或者fragment销毁了以后，回调或者网络请求才回来，此时做一些操作会导致异常。代码如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (lifecycle.currentState.isAtLeast(Lifecycle.State.STARTED)) &#123;</span><br><span class=\"line\">\t// do something 保证数据回调回来，当前activity是存在的，也就是State必须为STARTED、RESUMED，Activity此时的状态应该为onStart、onResume、onPause。</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"Activity如何实现Lifecycle\"><a href=\"#Activity如何实现Lifecycle\" class=\"headerlink\" title=\"Activity如何实现Lifecycle\"></a>Activity如何实现Lifecycle</h5><p>AppcompatActivity默认实现了LifecycleOwner，但是在开发当中一些第三方库使用了Activity，有时候我们也需要实现Lifecycle的功能。代码如下：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.jetpackdemo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Activity</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.lifecycle.Lifecycle</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.lifecycle.LifecycleOwner</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.lifecycle.LifecycleRegistry</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LifeOwnerActivity</span>: <span class=\"type\">Activity</span></span>(),LifecycleOwner &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> register:LifecycleRegistry = LifecycleRegistry(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        register.currentState = Lifecycle.State.CREATED</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getLifecycle</span><span class=\"params\">()</span></span>: Lifecycle &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> register</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onStart</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onStart()</span><br><span class=\"line\">        register.currentState = Lifecycle.State.STARTED</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onResume</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onResume()</span><br><span class=\"line\">        register.currentState = Lifecycle.State.RESUMED</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onPause</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onPause()</span><br><span class=\"line\">        register.currentState = Lifecycle.State.STARTED</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onSaveInstanceState</span><span class=\"params\">(outState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onSaveInstanceState(outState)</span><br><span class=\"line\">        register.currentState = Lifecycle.State.CREATED</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onStop</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onStop()</span><br><span class=\"line\">        register.currentState = Lifecycle.State.CREATED</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy()</span><br><span class=\"line\">        register.currentState = Lifecycle.State.DESTROYED</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>本篇博客历时1.5天。</p>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"Lifecycle为何出现？\"><a href=\"#Lifecycle为何出现？\" class=\"headerlink\" title=\"Lifecycle为何出现？\"></a>Lifecycle为何出现？</h5><ol>\n<li><p>在Activity生命周期方法中例如onCreate()、onStart()、onStop()中有大量的代码，例如一个获取用户位置的组件需要在onCreate()中初始化实例，在onStart()中开始获取用户位置，在onStop()中停止获取用户位置。这只是一个组件，在实际开发当中，业务是复杂的，组件也是很多的，维护这么多组件，会耗费很多精力。</p>\n</li>\n<li><p>是我们无法预测组件能在onStop()之前开始。例如一个定位组件需要在onStart()中检查配置（耗时操作），然后回调结果，开始获取位置。但是用户按下了home键，此时app进入后台，onStart()收到回调，那么在回调中做一些操作就会很危险（<a href=\"https://developer.android.google.cn/topic/libraries/architecture/lifecycle\" target=\"_blank\" rel=\"noopener\">官方翻译</a> 是组件保持活动的时间超过其所需的时间，大概意思是本应该在onStop()中销毁的一些对象，重新在onStart收到回调后复活了）。</p>\n</li>\n</ol>\n<h5 id=\"如何处理on-stop-events\"><a href=\"#如何处理on-stop-events\" class=\"headerlink\" title=\"如何处理on stop events?\"></a>如何处理on stop events?</h5><p>Event.ON_STOP 并不是随着Activity生命周期onStop()调用的，而是伴随着Activity生命周期中的onSaveInstanceState()，onStop()是在onSaveInstanceState()后面调用的。</p>\n<p>在 官方文档 中有这样一个小问题，为了使流程更简单，并与旧版本提供更好的兼容性，从版本1.0.0 RC1开始，Lifecycle对象被标记为CREATED，当onSaveInstanceState()被调用时， ON_STOP事件被分发，而不需等待调用onStop()方法。<strong>这不太可能影响您的代码</strong>，但这里你需要注意，因为它与API级别26和更低的Activity类中的调用顺序不匹配。所以这里不做详细的研究（之前一直对这里耿耿于怀）。</p>\n<p>下面是<a href=\"https://github.com/zhizhulp/JetPackDemo.git\" target=\"_blank\" rel=\"noopener\">demo</a> (Android8.0)中的log：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//进入MainActivity</span><br><span class=\"line\">2019-06-03 18:29:51.455 9831-9831/com.example.jetpackdemo D/MainActivity_LocationM: onCreate</span><br><span class=\"line\">2019-06-03 18:29:51.487 9831-9831/com.example.jetpackdemo D/LocationM: create-CREATED</span><br><span class=\"line\">2019-06-03 18:29:51.488 9831-9831/com.example.jetpackdemo D/MainActivity_LocationM: onStart</span><br><span class=\"line\">2019-06-03 18:29:51.489 9831-9831/com.example.jetpackdemo D/LocationM: start-STARTED</span><br><span class=\"line\">2019-06-03 18:29:51.493 9831-9831/com.example.jetpackdemo D/MainActivity_LocationM: onResume</span><br><span class=\"line\">2019-06-03 18:29:51.494 9831-9831/com.example.jetpackdemo D/LocationM: resume-RESUMED</span><br><span class=\"line\">//按home键/进入其他页面/按电源键/横竖屏切换（即app短暂进入后台）</span><br><span class=\"line\">2019-06-03 18:29:56.099 9831-9831/com.example.jetpackdemo D/LocationM: pause-STARTED</span><br><span class=\"line\">2019-06-03 18:29:56.100 9831-9831/com.example.jetpackdemo D/MainActivity_LocationM: onPause</span><br><span class=\"line\">2019-06-03 18:29:56.522 9831-9831/com.example.jetpackdemo D/MainActivity_LocationM: onSaveInstanceState</span><br><span class=\"line\">2019-06-03 18:29:56.523 9831-9831/com.example.jetpackdemo D/LocationM: stop-CREATED</span><br><span class=\"line\">2019-06-03 18:29:56.524 9831-9831/com.example.jetpackdemo D/MainActivity_LocationM: onStop</span><br><span class=\"line\">//重新进入MainActivity</span><br><span class=\"line\">2019-06-03 18:30:07.496 9831-9831/com.example.jetpackdemo D/MainActivity_LocationM: onStart</span><br><span class=\"line\">2019-06-03 18:30:07.497 9831-9831/com.example.jetpackdemo D/LocationM: start-STARTED</span><br><span class=\"line\">2019-06-03 18:30:07.497 9831-9831/com.example.jetpackdemo D/MainActivity_LocationM: onResume</span><br><span class=\"line\">2019-06-03 18:30:07.500 9831-9831/com.example.jetpackdemo D/LocationM: resume-RESUMED</span><br><span class=\"line\">//MainActivity销毁</span><br><span class=\"line\">2019-06-04 09:42:24.156 13677-13677/com.example.jetpackdemo D/LocationM: pause-STARTED</span><br><span class=\"line\">2019-06-04 09:42:24.158 13677-13677/com.example.jetpackdemo D/MainActivity_LocationM: onPause</span><br><span class=\"line\">2019-06-04 09:42:24.638 13677-13677/com.example.jetpackdemo D/LocationM: stop-CREATED</span><br><span class=\"line\">2019-06-04 09:42:24.638 13677-13677/com.example.jetpackdemo D/MainActivity_LocationM: onStop</span><br><span class=\"line\">2019-06-04 09:42:24.646 13677-13677/com.example.jetpackdemo D/LocationM: destroy-DESTROYED</span><br><span class=\"line\">2019-06-04 09:42:24.647 13677-13677/com.example.jetpackdemo D/MainActivity_LocationM: onDestroy</span><br></pre></td></tr></table></figure>\n<h5 id=\"如何理解State\"><a href=\"#如何理解State\" class=\"headerlink\" title=\"如何理解State?\"></a>如何理解State?</h5><p>官方的图解如下:</p>\n<p><img src=\"\\images\\lifecycle-states.png\" alt=\"/source/images\"></p>\n<p>为什么State只有5个？分别为INITIALIZED、DESTROYED、CREATED、STARTED、RESUMED，这里我参考了 <a href=\"https://blog.csdn.net/u012124438/article/details/88719321\" target=\"_blank\" rel=\"noopener\">这个博客</a> （非常感谢），其实这5个状态并不像字面上的意思。</p>\n<ol>\n<li>生命周期状态为RESUMED时表示，当前activity 是在前台，并且可交互也就onResume()执行后。</li>\n<li>生命周期状态为STARTED时，表示当前activity处于可见但是不可交互，也就是onStart()方法刚执行完或者onPause()方法刚执行完的状态。</li>\n<li>生命周期状态为CREATED，表示onCreate()方法刚刚执行完或者onStop()方法刚刚执行完，也就是当前activity不在前台，但是也没有处于销毁状态。</li>\n<li>生命周期状态为DESTORYED,表示当前Activity还不存在，没有被创建或者已经销毁，我们通常考虑比较多的就是，onDestory()方法执行后，当前Activity已经销毁。</li>\n<li>生命周期状态为INITIALIZED，表示初始状态。</li>\n</ol>\n<p>所以，如果我们要保证在Activity/Fragment的有效生命周期内进行的操作，必须判断，当前lifecycle的状态是否至少是CREATED状态，避免Activity或者fragment销毁了以后，回调或者网络请求才回来，此时做一些操作会导致异常。代码如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (lifecycle.currentState.isAtLeast(Lifecycle.State.STARTED)) &#123;</span><br><span class=\"line\">\t// do something 保证数据回调回来，当前activity是存在的，也就是State必须为STARTED、RESUMED，Activity此时的状态应该为onStart、onResume、onPause。</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"Activity如何实现Lifecycle\"><a href=\"#Activity如何实现Lifecycle\" class=\"headerlink\" title=\"Activity如何实现Lifecycle\"></a>Activity如何实现Lifecycle</h5><p>AppcompatActivity默认实现了LifecycleOwner，但是在开发当中一些第三方库使用了Activity，有时候我们也需要实现Lifecycle的功能。代码如下：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.jetpackdemo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Activity</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.lifecycle.Lifecycle</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.lifecycle.LifecycleOwner</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.lifecycle.LifecycleRegistry</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LifeOwnerActivity</span>: <span class=\"type\">Activity</span></span>(),LifecycleOwner &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> register:LifecycleRegistry = LifecycleRegistry(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        register.currentState = Lifecycle.State.CREATED</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getLifecycle</span><span class=\"params\">()</span></span>: Lifecycle &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> register</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onStart</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onStart()</span><br><span class=\"line\">        register.currentState = Lifecycle.State.STARTED</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onResume</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onResume()</span><br><span class=\"line\">        register.currentState = Lifecycle.State.RESUMED</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onPause</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onPause()</span><br><span class=\"line\">        register.currentState = Lifecycle.State.STARTED</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onSaveInstanceState</span><span class=\"params\">(outState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onSaveInstanceState(outState)</span><br><span class=\"line\">        register.currentState = Lifecycle.State.CREATED</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onStop</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onStop()</span><br><span class=\"line\">        register.currentState = Lifecycle.State.CREATED</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy()</span><br><span class=\"line\">        register.currentState = Lifecycle.State.DESTROYED</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>本篇博客历时1.5天。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjx5whsvq0002rwtkuzh73qh2","category_id":"cjx5whsw00005rwtkjd9vyrjj","_id":"cjx5whswb000grwtk5d3zard6"},{"post_id":"cjx5whsvx0004rwtki9qwom8d","category_id":"cjx5whsw7000brwtk9bcxq2kx","_id":"cjx5whswg000mrwtktbzpoe06"},{"post_id":"cjx5whsw5000arwtk5xjoqf87","category_id":"cjx5whsw7000brwtk9bcxq2kx","_id":"cjx5whswh000orwtke2v1j4b6"},{"post_id":"cjx5whsw8000erwtkhqeh0sdk","category_id":"cjx5whswf000lrwtkbk2ej72f","_id":"cjx5whswj000srwtkgap0kkcv"},{"post_id":"cjx5whswe000krwtkynvkts0f","category_id":"cjx5whswf000lrwtkbk2ej72f","_id":"cjx5whswk000wrwtk2nl3lgld"}],"PostTag":[{"post_id":"cjx5whsvq0002rwtkuzh73qh2","tag_id":"cjx5whsw10006rwtkk21ypeau","_id":"cjx5whsw8000drwtkqpz427th"},{"post_id":"cjx5whsvx0004rwtki9qwom8d","tag_id":"cjx5whsw7000crwtkztxwclf1","_id":"cjx5whswj000rrwtkt3yp355i"},{"post_id":"cjx5whsvx0004rwtki9qwom8d","tag_id":"cjx5whswc000irwtk6z3ljnqy","_id":"cjx5whswj000trwtkif8w54qy"},{"post_id":"cjx5whsvx0004rwtki9qwom8d","tag_id":"cjx5whswg000nrwtkho5tynpq","_id":"cjx5whswk000vrwtkeosat28v"},{"post_id":"cjx5whsw5000arwtk5xjoqf87","tag_id":"cjx5whswi000qrwtkxfpqz0iz","_id":"cjx5whswk000xrwtkarsu92dj"},{"post_id":"cjx5whsw8000erwtkhqeh0sdk","tag_id":"cjx5whswj000urwtk1h138zhl","_id":"cjx5whswl0010rwtkohc7b0dx"},{"post_id":"cjx5whsw8000erwtkhqeh0sdk","tag_id":"cjx5whswk000yrwtkwvphdo0t","_id":"cjx5whswm0011rwtk9zenroao"},{"post_id":"cjx5whswe000krwtkynvkts0f","tag_id":"cjx5whswl000zrwtkdwsruthv","_id":"cjx5whswo0013rwtk9eyj87eb"},{"post_id":"cjx5whswe000krwtkynvkts0f","tag_id":"cjx5whswm0012rwtkweg885pj","_id":"cjx5whswo0014rwtk25up47a8"}],"Tag":[{"name":"旅游","_id":"cjx5whsw10006rwtkk21ypeau"},{"name":"web","_id":"cjx5whsw7000crwtkztxwclf1"},{"name":"静态页面生成器","_id":"cjx5whswc000irwtk6z3ljnqy"},{"name":"markdown","_id":"cjx5whswg000nrwtkho5tynpq"},{"name":"Hexo","_id":"cjx5whswi000qrwtkxfpqz0iz"},{"name":"databinding","_id":"cjx5whswj000urwtk1h138zhl"},{"name":"java","_id":"cjx5whswk000yrwtkwvphdo0t"},{"name":"Android","_id":"cjx5whswl000zrwtkdwsruthv"},{"name":"Jetpack","_id":"cjx5whswm0012rwtkweg885pj"}]}}